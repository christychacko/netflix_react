{"ast":null,"code":"'use strict';\n\nconst async = require('async');\nconst ItemArray = require('./item_array.js');\n\n/**\n* Array of Models, for easy conversion to Objects\n* @class\n*/\nclass ModelArray extends ItemArray {\n  /**\n  * Create the ModelArray with a provided Model to use as a reference.\n  * @param {Array|class Carthage.Model} modelConstructor Must pass the constructor for the type of ModelArray you wish to create.\n  */\n  constructor(modelConstructor) {\n    super();\n    this.Model = modelConstructor;\n  }\n\n  /**\n  * Convert a normal Array into a ModelArray\n  * @param {Array} arr The array of child objects\n  */\n  static from(arr) {\n    if (!arr.length) {\n      throw new Error('Cannot create ModelArray from empty Aray');\n    }\n    let modelArray = new this(arr[0].constructor);\n    modelArray.push.apply(modelArray, arr);\n    return modelArray;\n  }\n\n  /**\n  * Creates an Array of plain objects from the ModelArray, with properties matching an optional interface\n  * @param {Array} arrInterface Interface to use for object creation for each model\n  */\n  toObject(arrInterface) {\n    return this.map(m => m.toObject(arrInterface));\n  }\n\n  /**\n  * Checks if ModelArray has a model in it\n  * @param {Carthage.Model} model\n  */\n  has(model) {\n    return this.filter(m => m.get('id') === model.get('id')).length > 0;\n  }\n\n  /**\n  * Calls Model#read on each Model in the ModelArray\n  * @param {Object}\n  */\n  readAll(data) {\n    this.forEach(model => model.read(data));\n    return true;\n  }\n\n  /**\n  * Calls Model#read on each Model in the ModelArray\n  * @param {Object}\n  */\n  setAll(field, value) {\n    this.forEach(model => model.set(field, value));\n    return true;\n  }\n\n  /**\n  * Destroys (deletes) all models in the ModelArray from the database\n  * @param {function} callback Method to invoke upon completion\n  */\n  destroyAll(callback) {\n    if (this.filter(m => !m.inStorage()).length) {\n      return callback(new Error('Not all models are in storage'));\n    }\n    let db = this.Model.prototype.db;\n    let params = this.map(m => m.get('id'));\n    let sql = db.adapter.generateDeleteAllQuery(this.Model.table(), 'id', params);\n    db.query(sql, params, (err, result) => {\n      if (err) {\n        return callback.call(this, new Error(err.message));\n      }\n      this.forEach(m => m._inStorage = false);\n      callback.call(this, null);\n    });\n  }\n\n  /**\n  * Destroys model and cascades all deletes.\n  * @param {function} callback method to run upon completion\n  */\n  destroyCascade(callback) {\n    let db = this.Model.prototype.db;\n    if (this.filter(m => !m.inStorage()).length) {\n      return callback(new Error('Not all models are in storage'));\n    }\n    let params = this.map(m => m.get('id'));\n    let txn = [[db.adapter.generateDeleteAllQuery(this.Model.table(), 'id', params), params]];\n    let children = this.Model.relationships().cascade();\n    txn = txn.concat(children.map(p => {\n      return [db.adapter.generateDeleteAllQuery(p.getModel().table(), 'id', params, p.joins(null, this.Model.table())), params];\n    })).reverse();\n    db.transaction(txn, (err, result) => {\n      if (err) {\n        return callback(err);\n      }\n      this.forEach(m => m._inStorage = false);\n      callback(null);\n    });\n  }\n\n  /**\n  * Saves / updates all models in the ModelArray. Uses beforeSave / afterSave. Will return an error and rollback if *any* model errors out.\n  * @param {function} callback returning the error and reference to self\n  */\n  saveAll(callback) {\n    if (!this.length) {\n      return callback.call(this, null, this);\n    }\n    async.series(this.map(m => m.beforeSave.bind(m)), err => {\n      if (err) {\n        return callback(err);\n      }\n      this.__saveAll__(err => {\n        if (err) {\n          return callback(err, this);\n        }\n        async.series(this.map(m => m.afterSave.bind(m)), err => callback(err || null, this));\n      });\n    });\n  }\n\n  /**\n  * save all models (outside of beforeSave / afterSave)\n  * @param {function} callback Called with error, if applicable\n  * @private\n  */\n  __saveAll__(callback) {\n    let firstErrorModel = this.filter(m => m.hasErrors()).shift();\n    if (firstErrorModel) {\n      return callback.call(this, firstErrorModel.errorObject());\n    }\n    async.series(this.map(m => m.__verify__.bind(m)), err => {\n      if (err) {\n        return callback.call(this, err);\n      }\n      let db = this.Model.prototype.db;\n      db.transaction(this.map(m => {\n        let query = m.__generateSaveQuery__();\n        return [query.sql, query.params];\n      }), (err, result) => {\n        if (err) {\n          return callback.call(this, new Error(err.message));\n        }\n        this.forEach((m, i) => {\n          m.__load__(result[i].rows[0], true);\n        });\n        callback.call(this, null);\n      });\n    });\n  }\n}\nmodule.exports = ModelArray;","map":{"version":3,"names":["async","require","ItemArray","ModelArray","constructor","modelConstructor","Model","from","arr","length","Error","modelArray","push","apply","toObject","arrInterface","map","m","has","model","filter","get","readAll","data","forEach","read","setAll","field","value","set","destroyAll","callback","inStorage","db","prototype","params","sql","adapter","generateDeleteAllQuery","table","query","err","result","call","message","_inStorage","destroyCascade","txn","children","relationships","cascade","concat","p","getModel","joins","reverse","transaction","saveAll","series","beforeSave","bind","__saveAll__","afterSave","firstErrorModel","hasErrors","shift","errorObject","__verify__","__generateSaveQuery__","i","__load__","rows","module","exports"],"sources":["/Users/apps/node_modules/carthage/core/required/model_array.js"],"sourcesContent":["'use strict';\n\nconst async = require('async');\n\nconst ItemArray = require('./item_array.js');\n\n/**\n* Array of Models, for easy conversion to Objects\n* @class\n*/\nclass ModelArray extends ItemArray {\n\n  /**\n  * Create the ModelArray with a provided Model to use as a reference.\n  * @param {Array|class Carthage.Model} modelConstructor Must pass the constructor for the type of ModelArray you wish to create.\n  */\n  constructor(modelConstructor) {\n\n    super();\n    this.Model = modelConstructor;\n\n  }\n\n  /**\n  * Convert a normal Array into a ModelArray\n  * @param {Array} arr The array of child objects\n  */\n  static from(arr) {\n\n    if (!arr.length) {\n      throw new Error('Cannot create ModelArray from empty Aray');\n    }\n\n    let modelArray = new this(arr[0].constructor);\n    modelArray.push.apply(modelArray, arr);\n\n    return modelArray;\n\n  }\n\n  /**\n  * Creates an Array of plain objects from the ModelArray, with properties matching an optional interface\n  * @param {Array} arrInterface Interface to use for object creation for each model\n  */\n  toObject(arrInterface) {\n\n    return this.map(m => m.toObject(arrInterface));\n\n  }\n\n  /**\n  * Checks if ModelArray has a model in it\n  * @param {Carthage.Model} model\n  */\n  has(model) {\n    return this.filter(m => m.get('id') === model.get('id')).length > 0;\n  }\n\n  /**\n  * Calls Model#read on each Model in the ModelArray\n  * @param {Object}\n  */\n  readAll(data) {\n    this.forEach(model => model.read(data));\n    return true;\n  }\n\n  /**\n  * Calls Model#read on each Model in the ModelArray\n  * @param {Object}\n  */\n  setAll(field, value) {\n    this.forEach(model => model.set(field, value));\n    return true;\n  }\n\n  /**\n  * Destroys (deletes) all models in the ModelArray from the database\n  * @param {function} callback Method to invoke upon completion\n  */\n  destroyAll(callback) {\n\n    if (this.filter(m => !m.inStorage()).length) {\n      return callback(new Error('Not all models are in storage'))\n    }\n\n    let db = this.Model.prototype.db;\n\n    let params = this.map(m => m.get('id'));\n    let sql = db.adapter.generateDeleteAllQuery(this.Model.table(), 'id', params);\n\n    db.query(\n      sql,\n      params,\n      (err, result) => {\n\n        if (err) {\n          return callback.call(this, new Error(err.message));\n        }\n\n        this.forEach(m => m._inStorage = false);\n\n        callback.call(this, null);\n\n      }\n    );\n\n  }\n\n  /**\n  * Destroys model and cascades all deletes.\n  * @param {function} callback method to run upon completion\n  */\n  destroyCascade(callback) {\n\n    let db = this.Model.prototype.db;\n\n    if (this.filter(m => !m.inStorage()).length) {\n      return callback(new Error('Not all models are in storage'))\n    }\n\n    let params = this.map(m => m.get('id'));\n    let txn = [[db.adapter.generateDeleteAllQuery(this.Model.table(), 'id', params), params]];\n\n    let children = this.Model.relationships().cascade();\n    txn = txn.concat(\n      children.map(p => {\n        return [db.adapter.generateDeleteAllQuery(p.getModel().table(), 'id', params, p.joins(null, this.Model.table())), params];\n      })\n    ).reverse();\n\n    db.transaction(\n      txn,\n      (err, result) => {\n\n        if (err) {\n          return callback(err);\n        }\n\n        this.forEach(m => m._inStorage = false);\n\n        callback(null);\n\n      }\n    );\n\n  }\n\n  /**\n  * Saves / updates all models in the ModelArray. Uses beforeSave / afterSave. Will return an error and rollback if *any* model errors out.\n  * @param {function} callback returning the error and reference to self\n  */\n  saveAll(callback) {\n\n    if (!this.length) {\n      return callback.call(this, null, this);\n    }\n\n    async.series(\n      this.map(m => m.beforeSave.bind(m)),\n      err => {\n\n        if (err) {\n          return callback(err);\n        }\n\n        this.__saveAll__(err => {\n\n          if (err) {\n            return callback(err, this);\n          }\n\n          async.series(\n            this.map(m => m.afterSave.bind(m)),\n            err => callback(err || null, this)\n          );\n\n        });\n\n      }\n    );\n\n  }\n\n  /**\n  * save all models (outside of beforeSave / afterSave)\n  * @param {function} callback Called with error, if applicable\n  * @private\n  */\n  __saveAll__(callback) {\n\n    let firstErrorModel = this.filter(m => m.hasErrors()).shift();\n\n    if (firstErrorModel) {\n      return callback.call(this, firstErrorModel.errorObject());\n    }\n\n    async.series(\n      this.map(m => m.__verify__.bind(m)),\n      (err) => {\n\n        if (err) {\n          return callback.call(this, err);\n        }\n\n        let db = this.Model.prototype.db;\n\n        db.transaction(\n          this.map(m => {\n            let query = m.__generateSaveQuery__();\n            return [query.sql, query.params];\n          }),\n          (err, result) => {\n\n            if (err) {\n              return callback.call(this, new Error(err.message));\n            }\n\n            this.forEach((m, i) => {\n              m.__load__(result[i].rows[0], true);\n            });\n\n            callback.call(this, null);\n\n          }\n        );\n\n      }\n    );\n\n  }\n\n}\n\nmodule.exports = ModelArray;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}