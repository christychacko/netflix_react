{"ast":null,"code":"// The Inflector transforms words from singular to plural, class names to table names, modularized class names to ones without,\n// and class names to foreign keys. The default inflections for pluralization, singularization, and uncountable words are kept\n// in inflections.coffee\n//\n// If you discover an incorrect inflection and require it for your application, you'll need\n// to correct it yourself (explained below).\n\nvar util = require('./util');\nvar inflect = module.exports;\n\n// Import [inflections](inflections.html) instance\ninflect.inflections = require('./inflections');\n\n// Gives easy access to add inflections to this class\ninflect.inflect = function (fn) {\n  fn(inflect.inflections);\n};\n\n// By default, _camelize_ converts strings to UpperCamelCase. If the argument to _camelize_\n// is set to _false_ then _camelize_ produces lowerCamelCase.\n//\n// _camelize_ will also convert '/' to '.' which is useful for converting paths to namespaces.\n//\n//     \"bullet_record\".camelize()             // => \"BulletRecord\"\n//     \"bullet_record\".camelize(false)        // => \"bulletRecord\"\n//     \"bullet_record/errors\".camelize()      // => \"BulletRecord.Errors\"\n//     \"bullet_record/errors\".camelize(false) // => \"bulletRecord.Errors\"\n//\n// As a rule of thumb you can think of _camelize_ as the inverse of _underscore_,\n// though there are cases where that does not hold:\n//\n//     \"SSLError\".underscore.camelize // => \"SslError\"\ninflect.camelize = function (lower_case_and_underscored_word, first_letter_in_uppercase) {\n  var result;\n  if (first_letter_in_uppercase == null) first_letter_in_uppercase = true;\n  result = util.string.gsub(lower_case_and_underscored_word, /\\/(.?)/, function ($) {\n    return '.' + util.string.upcase($[1]);\n  });\n  result = util.string.gsub(result, /(?:_)(.)/, function ($) {\n    return util.string.upcase($[1]);\n  });\n  if (first_letter_in_uppercase) {\n    return util.string.upcase(result);\n  } else {\n    return util.string.downcase(result);\n  }\n};\n\n// Makes an underscored, lowercase form from the expression in the string.\n//\n// Changes '.' to '/' to convert namespaces to paths.\n//\n//     \"BulletRecord\".underscore()         // => \"bullet_record\"\n//     \"BulletRecord.Errors\".underscore()  // => \"bullet_record/errors\"\n//\n// As a rule of thumb you can think of +underscore+ as the inverse of +camelize+,\n// though there are cases where that does not hold:\n//\n//     \"SSLError\".underscore().camelize() // => \"SslError\"\ninflect.underscore = function (camel_cased_word) {\n  var self;\n  self = util.string.gsub(camel_cased_word, /\\./, '/');\n  self = util.string.gsub(self, /([A-Z])([A-Z][a-z])/, '$1_$2');\n  self = util.string.gsub(self, /([a-z\\d])([A-Z])/, '$1_$2');\n  self = util.string.gsub(self, /-/, '_');\n  return self.toLowerCase();\n};\n\n// Replaces underscores with dashes in the string.\n//\n//     \"puni_puni\".dasherize()   // => \"puni-puni\"\ninflect.dasherize = function (underscored_word) {\n  return util.string.gsub(underscored_word, /_/, '-');\n};\n\n// Removes the module part from the expression in the string.\n//\n//     \"BulletRecord.String.Inflections\".demodulize() // => \"Inflections\"\n//     \"Inflections\".demodulize()                     // => \"Inflections\"\ninflect.demodulize = function (class_name_in_module) {\n  return util.string.gsub(class_name_in_module, /^.*\\./, '');\n};\n\n// Creates a foreign key name from a class name.\n// _separate_class_name_and_id_with_underscore_ sets whether\n// the method should put '_' between the name and 'id'.\n//\n//     \"Message\".foreign_key()      // => \"message_id\"\n//     \"Message\".foreign_key(false) // => \"messageid\"\n//     \"Admin::Post\".foreign_key()  // => \"post_id\"\ninflect.foreign_key = function (class_name, separate_class_name_and_id_with_underscore) {\n  if (separate_class_name_and_id_with_underscore == null) {\n    separate_class_name_and_id_with_underscore = true;\n  }\n  return inflect.underscore(inflect.demodulize(class_name)) + (separate_class_name_and_id_with_underscore ? '_id' : 'id');\n};\n\n// Turns a number into an ordinal string used to denote the position in an\n// ordered sequence such as 1st, 2nd, 3rd, 4th.\n//\n//     ordinalize(1)     // => \"1st\"\n//     ordinalize(2)     // => \"2nd\"\n//     ordinalize(1002)  // => \"1002nd\"\n//     ordinalize(1003)  // => \"1003rd\"\n//     ordinalize(-11)   // => \"-11th\"\n//     ordinalize(-1021) // => \"-1021st\"\ninflect.ordinalize = function (number) {\n  var _ref;\n  number = parseInt(number);\n  if ((_ref = Math.abs(number) % 100) === 11 || _ref === 12 || _ref === 13) {\n    return '' + number + 'th';\n  } else {\n    switch (Math.abs(number) % 10) {\n      case 1:\n        return '' + number + 'st';\n      case 2:\n        return '' + number + 'nd';\n      case 3:\n        return '' + number + 'rd';\n      default:\n        return '' + number + 'th';\n    }\n  }\n};\n\n// Checks a given word for uncountability\n//\n//     \"money\".uncountability()     // => true\n//     \"my money\".uncountability()  // => true\ninflect.uncountability = function (word) {\n  return inflect.inflections.uncountables.some(function (ele, ind, arr) {\n    return word.match(new RegExp('(\\\\b|_)' + ele + '$', 'i')) != null;\n  });\n};\n\n// Returns the plural form of the word in the string.\n//\n//     \"post\".pluralize()             // => \"posts\"\n//     \"octopus\".pluralize()          // => \"octopi\"\n//     \"sheep\".pluralize()            // => \"sheep\"\n//     \"words\".pluralize()            // => \"words\"\n//     \"CamelOctopus\".pluralize()     // => \"CamelOctopi\"\ninflect.pluralize = function (word) {\n  var plural, result;\n  result = word;\n  if (word === '' || inflect.uncountability(word)) {\n    return result;\n  } else {\n    for (var i = 0; i < inflect.inflections.plurals.length; i++) {\n      plural = inflect.inflections.plurals[i];\n      result = util.string.gsub(result, plural[0], plural[1]);\n      if (word.match(plural[0]) != null) break;\n    }\n    return result;\n  }\n};\n\n// The reverse of _pluralize_, returns the singular form of a word in a string.\n//\n//     \"posts\".singularize()            // => \"post\"\n//     \"octopi\".singularize()           // => \"octopus\"\n//     \"sheep\".singularize()            // => \"sheep\"\n//     \"word\".singularize()             // => \"word\"\n//     \"CamelOctopi\".singularize()      // => \"CamelOctopus\"\ninflect.singularize = function (word) {\n  var result, singular;\n  result = word;\n  if (word === '' || inflect.uncountability(word)) {\n    return result;\n  } else {\n    for (var i = 0; i < inflect.inflections.singulars.length; i++) {\n      singular = inflect.inflections.singulars[i];\n      result = util.string.gsub(result, singular[0], singular[1]);\n      if (word.match(singular[0])) break;\n    }\n    return result;\n  }\n};\n\n// Capitalizes the first word and turns underscores into spaces and strips a\n// trailing \"_id\", if any. Like _titleize_, this is meant for creating pretty output.\n//\n//     \"employee_salary\".humanize()   // => \"Employee salary\"\n//     \"author_id\".humanize()         // => \"Author\"\ninflect.humanize = function (lower_case_and_underscored_word) {\n  var human, result;\n  result = lower_case_and_underscored_word;\n  for (var i = 0; i < inflect.inflections.humans.length; i++) {\n    human = inflect.inflections.humans[i];\n    result = util.string.gsub(result, human[0], human[1]);\n  }\n  result = util.string.gsub(result, /_id$/, '');\n  result = util.string.gsub(result, /_/, ' ');\n  return util.string.capitalize(result, true);\n};\n\n// Capitalizes all the words and replaces some characters in the string to create\n// a nicer looking title. _titleize_ is meant for creating pretty output. It is not\n// used in the Bullet internals.\n//\n//\n//     \"man from the boondocks\".titleize()   // => \"Man From The Boondocks\"\n//     \"x-men: the last stand\".titleize()    // => \"X Men: The Last Stand\"\ninflect.titleize = function (word) {\n  var self;\n  self = inflect.humanize(inflect.underscore(word));\n  return util.string.capitalize(self);\n};\n\n// Create the name of a table like Bullet does for models to table names. This method\n// uses the _pluralize_ method on the last word in the string.\n//\n//     \"RawScaledScorer\".tableize()   // => \"raw_scaled_scorers\"\n//     \"egg_and_ham\".tableize()       // => \"egg_and_hams\"\n//     \"fancyCategory\".tableize()     // => \"fancy_categories\"\ninflect.tableize = function (class_name) {\n  return inflect.pluralize(inflect.underscore(class_name));\n};\n\n// Create a class name from a plural table name like Bullet does for table names to models.\n// Note that this returns a string and not a Class.\n//\n//     \"egg_and_hams\".classify()   // => \"EggAndHam\"\n//     \"posts\".classify()          // => \"Post\"\n//\n// Singular names are not handled correctly:\n//\n//     \"business\".classify()       // => \"Busines\"\ninflect.classify = function (table_name) {\n  return inflect.camelize(inflect.singularize(util.string.gsub(table_name, /^.*\\./, '')));\n};","map":{"version":3,"names":["util","require","inflect","module","exports","inflections","fn","camelize","lower_case_and_underscored_word","first_letter_in_uppercase","result","string","gsub","$","upcase","downcase","underscore","camel_cased_word","self","toLowerCase","dasherize","underscored_word","demodulize","class_name_in_module","foreign_key","class_name","separate_class_name_and_id_with_underscore","ordinalize","number","_ref","parseInt","Math","abs","uncountability","word","uncountables","some","ele","ind","arr","match","RegExp","pluralize","plural","i","plurals","length","singularize","singular","singulars","humanize","human","humans","capitalize","titleize","tableize","classify","table_name"],"sources":["/Users/apps/node_modules/i/lib/methods.js"],"sourcesContent":["// The Inflector transforms words from singular to plural, class names to table names, modularized class names to ones without,\n// and class names to foreign keys. The default inflections for pluralization, singularization, and uncountable words are kept\n// in inflections.coffee\n//\n// If you discover an incorrect inflection and require it for your application, you'll need\n// to correct it yourself (explained below).\n\nvar util = require('./util');\n\nvar inflect = module.exports;\n\n// Import [inflections](inflections.html) instance\ninflect.inflections = require('./inflections');\n\n// Gives easy access to add inflections to this class\ninflect.inflect = function (fn) {\n  fn(inflect.inflections);\n};\n\n// By default, _camelize_ converts strings to UpperCamelCase. If the argument to _camelize_\n// is set to _false_ then _camelize_ produces lowerCamelCase.\n//\n// _camelize_ will also convert '/' to '.' which is useful for converting paths to namespaces.\n//\n//     \"bullet_record\".camelize()             // => \"BulletRecord\"\n//     \"bullet_record\".camelize(false)        // => \"bulletRecord\"\n//     \"bullet_record/errors\".camelize()      // => \"BulletRecord.Errors\"\n//     \"bullet_record/errors\".camelize(false) // => \"bulletRecord.Errors\"\n//\n// As a rule of thumb you can think of _camelize_ as the inverse of _underscore_,\n// though there are cases where that does not hold:\n//\n//     \"SSLError\".underscore.camelize // => \"SslError\"\ninflect.camelize = function (lower_case_and_underscored_word, first_letter_in_uppercase) {\n  var result;\n  if (first_letter_in_uppercase == null) first_letter_in_uppercase = true;\n  result = util.string.gsub(lower_case_and_underscored_word, /\\/(.?)/, function ($) {\n    return '.' + util.string.upcase($[1]);\n  });\n  result = util.string.gsub(result, /(?:_)(.)/, function ($) {\n    return util.string.upcase($[1]);\n  });\n  if (first_letter_in_uppercase) {\n    return util.string.upcase(result);\n  } else {\n    return util.string.downcase(result);\n  }\n};\n\n// Makes an underscored, lowercase form from the expression in the string.\n//\n// Changes '.' to '/' to convert namespaces to paths.\n//\n//     \"BulletRecord\".underscore()         // => \"bullet_record\"\n//     \"BulletRecord.Errors\".underscore()  // => \"bullet_record/errors\"\n//\n// As a rule of thumb you can think of +underscore+ as the inverse of +camelize+,\n// though there are cases where that does not hold:\n//\n//     \"SSLError\".underscore().camelize() // => \"SslError\"\ninflect.underscore = function (camel_cased_word) {\n  var self;\n  self = util.string.gsub(camel_cased_word, /\\./, '/');\n  self = util.string.gsub(self, /([A-Z])([A-Z][a-z])/, '$1_$2');\n  self = util.string.gsub(self, /([a-z\\d])([A-Z])/, '$1_$2');\n  self = util.string.gsub(self, /-/, '_');\n  return self.toLowerCase();\n};\n\n// Replaces underscores with dashes in the string.\n//\n//     \"puni_puni\".dasherize()   // => \"puni-puni\"\ninflect.dasherize = function (underscored_word) {\n  return util.string.gsub(underscored_word, /_/, '-');\n};\n\n// Removes the module part from the expression in the string.\n//\n//     \"BulletRecord.String.Inflections\".demodulize() // => \"Inflections\"\n//     \"Inflections\".demodulize()                     // => \"Inflections\"\ninflect.demodulize = function (class_name_in_module) {\n  return util.string.gsub(class_name_in_module, /^.*\\./, '');\n};\n\n// Creates a foreign key name from a class name.\n// _separate_class_name_and_id_with_underscore_ sets whether\n// the method should put '_' between the name and 'id'.\n//\n//     \"Message\".foreign_key()      // => \"message_id\"\n//     \"Message\".foreign_key(false) // => \"messageid\"\n//     \"Admin::Post\".foreign_key()  // => \"post_id\"\ninflect.foreign_key = function (class_name, separate_class_name_and_id_with_underscore) {\n  if (separate_class_name_and_id_with_underscore == null) {\n    separate_class_name_and_id_with_underscore = true;\n  }\n  return (\n    inflect.underscore(inflect.demodulize(class_name)) + (separate_class_name_and_id_with_underscore ? '_id' : 'id')\n  );\n};\n\n// Turns a number into an ordinal string used to denote the position in an\n// ordered sequence such as 1st, 2nd, 3rd, 4th.\n//\n//     ordinalize(1)     // => \"1st\"\n//     ordinalize(2)     // => \"2nd\"\n//     ordinalize(1002)  // => \"1002nd\"\n//     ordinalize(1003)  // => \"1003rd\"\n//     ordinalize(-11)   // => \"-11th\"\n//     ordinalize(-1021) // => \"-1021st\"\ninflect.ordinalize = function (number) {\n  var _ref;\n  number = parseInt(number);\n  if ((_ref = Math.abs(number) % 100) === 11 || _ref === 12 || _ref === 13) {\n    return '' + number + 'th';\n  } else {\n    switch (Math.abs(number) % 10) {\n      case 1:\n        return '' + number + 'st';\n      case 2:\n        return '' + number + 'nd';\n      case 3:\n        return '' + number + 'rd';\n      default:\n        return '' + number + 'th';\n    }\n  }\n};\n\n// Checks a given word for uncountability\n//\n//     \"money\".uncountability()     // => true\n//     \"my money\".uncountability()  // => true\ninflect.uncountability = function (word) {\n  return inflect.inflections.uncountables.some(function (ele, ind, arr) {\n    return word.match(new RegExp('(\\\\b|_)' + ele + '$', 'i')) != null;\n  });\n};\n\n// Returns the plural form of the word in the string.\n//\n//     \"post\".pluralize()             // => \"posts\"\n//     \"octopus\".pluralize()          // => \"octopi\"\n//     \"sheep\".pluralize()            // => \"sheep\"\n//     \"words\".pluralize()            // => \"words\"\n//     \"CamelOctopus\".pluralize()     // => \"CamelOctopi\"\ninflect.pluralize = function (word) {\n  var plural, result;\n  result = word;\n  if (word === '' || inflect.uncountability(word)) {\n    return result;\n  } else {\n    for (var i = 0; i < inflect.inflections.plurals.length; i++) {\n      plural = inflect.inflections.plurals[i];\n      result = util.string.gsub(result, plural[0], plural[1]);\n      if (word.match(plural[0]) != null) break;\n    }\n    return result;\n  }\n};\n\n// The reverse of _pluralize_, returns the singular form of a word in a string.\n//\n//     \"posts\".singularize()            // => \"post\"\n//     \"octopi\".singularize()           // => \"octopus\"\n//     \"sheep\".singularize()            // => \"sheep\"\n//     \"word\".singularize()             // => \"word\"\n//     \"CamelOctopi\".singularize()      // => \"CamelOctopus\"\ninflect.singularize = function (word) {\n  var result, singular;\n  result = word;\n  if (word === '' || inflect.uncountability(word)) {\n    return result;\n  } else {\n    for (var i = 0; i < inflect.inflections.singulars.length; i++) {\n      singular = inflect.inflections.singulars[i];\n      result = util.string.gsub(result, singular[0], singular[1]);\n      if (word.match(singular[0])) break;\n    }\n    return result;\n  }\n};\n\n// Capitalizes the first word and turns underscores into spaces and strips a\n// trailing \"_id\", if any. Like _titleize_, this is meant for creating pretty output.\n//\n//     \"employee_salary\".humanize()   // => \"Employee salary\"\n//     \"author_id\".humanize()         // => \"Author\"\ninflect.humanize = function (lower_case_and_underscored_word) {\n  var human, result;\n  result = lower_case_and_underscored_word;\n  for (var i = 0; i < inflect.inflections.humans.length; i++) {\n    human = inflect.inflections.humans[i];\n    result = util.string.gsub(result, human[0], human[1]);\n  }\n  result = util.string.gsub(result, /_id$/, '');\n  result = util.string.gsub(result, /_/, ' ');\n  return util.string.capitalize(result, true);\n};\n\n// Capitalizes all the words and replaces some characters in the string to create\n// a nicer looking title. _titleize_ is meant for creating pretty output. It is not\n// used in the Bullet internals.\n//\n//\n//     \"man from the boondocks\".titleize()   // => \"Man From The Boondocks\"\n//     \"x-men: the last stand\".titleize()    // => \"X Men: The Last Stand\"\ninflect.titleize = function (word) {\n  var self;\n  self = inflect.humanize(inflect.underscore(word));\n  return util.string.capitalize(self);\n};\n\n// Create the name of a table like Bullet does for models to table names. This method\n// uses the _pluralize_ method on the last word in the string.\n//\n//     \"RawScaledScorer\".tableize()   // => \"raw_scaled_scorers\"\n//     \"egg_and_ham\".tableize()       // => \"egg_and_hams\"\n//     \"fancyCategory\".tableize()     // => \"fancy_categories\"\ninflect.tableize = function (class_name) {\n  return inflect.pluralize(inflect.underscore(class_name));\n};\n\n// Create a class name from a plural table name like Bullet does for table names to models.\n// Note that this returns a string and not a Class.\n//\n//     \"egg_and_hams\".classify()   // => \"EggAndHam\"\n//     \"posts\".classify()          // => \"Post\"\n//\n// Singular names are not handled correctly:\n//\n//     \"business\".classify()       // => \"Busines\"\ninflect.classify = function (table_name) {\n  return inflect.camelize(inflect.singularize(util.string.gsub(table_name, /^.*\\./, '')));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}