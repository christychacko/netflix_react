{"ast":null,"code":"'use strict';\n\nconst DataTypes = require('./db/data_types.js');\nconst Database = require('./db/database.js');\nconst Composer = require('./composer.js');\nconst ModelArray = require('./model_array.js');\nconst utilities = require('./utilities.js');\nconst async = require('async');\nconst inflect = require('i')();\nconst deepEqual = require('deep-equal');\nconst RelationshipGraph = require('./relationship_graph.js');\nconst Relationships = new RelationshipGraph();\n\n/**\n* Basic Model implementation. Optionally interfaces with database.\n* @class\n*/\nclass Model {\n  /**\n  * @param {Object} modelData Data to load into the object\n  * @param {optional boolean} fromStorage Is this model being loaded from storage? Defaults to false.\n  * @param {option boolean} fromSeed Is this model being seeded?\n  */\n  constructor(modelData, fromStorage, fromSeed) {\n    modelData = modelData || {};\n    this.__initialize__();\n    this.__load__(modelData, fromStorage, fromSeed);\n  }\n\n  /**\n  * Finds a model with a provided id, otherwise returns a notFound error.\n  * @param {number} id The id of the model you're looking for\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static find(id, callback) {\n    let db = this.prototype.db;\n\n    // legacy support\n    if (arguments.length === 3) {\n      db = arguments[0];\n      id = arguments[1];\n      callback = arguments[2];\n    }\n    return new Composer(this).where({\n      id: id\n    }).end((err, models) => {\n      if (!err && !models.length) {\n        let err = new Error(`Could not find ${this.name} with id \"${id}\".`);\n        err.notFound = true;\n        return callback(err);\n      }\n      callback(err, models[0]);\n    });\n  }\n\n  /**\n  * Finds a model with a provided field, value pair. Returns the first found.\n  * @param {string} field Name of the field\n  * @param {any} value Value of the named field to compare against\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static findBy(field, value, callback) {\n    let db = this.prototype.db;\n    let query = {};\n    query[field] = value;\n    return new Composer(this).where(query).end((err, models) => {\n      if (!err && !models.length) {\n        let err = new Error(`Could not find ${this.name} with ${field} \"${value}\".`);\n        err.notFound = true;\n        return callback(err);\n      }\n      callback(err, models[0]);\n    });\n  }\n\n  /**\n  * Creates a new model instance using the provided data.\n  * @param {object} data The data to load into the object.\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static create(data, callback) {\n    let model = new this(data);\n    model.save(callback);\n  }\n\n  /**\n  * Finds a model with a provided field, value pair. Returns the first found.\n  * @param {string} field Name of the field\n  * @param {object} data Key-value pairs of Model creation data. Will use appropriate value to query for based on \"field\" parametere.\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static findOrCreateBy(field, data, callback) {\n    this.findBy(field, data[field], (err, model) => {\n      if (err) {\n        if (err.notFound) {\n          return this.create(data, callback);\n        } else {\n          return callback(err);\n        }\n      } else {\n        return callback(null, model);\n      }\n    });\n  }\n\n  /**\n  * Finds and updates a model with a specified id. Return a notFound error if model does not exist.\n  * @param {number} id The id of the model you're looking for\n  * @param {object} data The data to load into the object.\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static update(id, data, callback) {\n    this.find(id, (err, model) => {\n      if (err) {\n        return callback(err);\n      }\n      model.read(data);\n      model.save(callback);\n    });\n  }\n\n  /**\n  * Finds and destroys a model with a specified id. Return a notFound error if model does not exist.\n  * @param {number} id The id of the model you're looking for\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static destroy(id, callback) {\n    this.find(id, (err, model) => {\n      if (err) {\n        return callback(err);\n      }\n      model.destroy(callback);\n    });\n  }\n\n  /**\n  * Creates a new Composer (ORM) instance to begin a new query.\n  * @param {optional Carthage.Database} db Deprecated - provide a database to query from. Set the model's db in its constructor file, instead.\n  * @return {Carthage.Composer}\n  */\n  static query(db) {\n    db = db || this.prototype.db;\n    return new Composer(this);\n  }\n\n  /**\n  * Get the model's table name\n  * @return {string}\n  */\n  static table() {\n    return this.prototype.schema.table;\n  }\n\n  /**\n  * Get the model's column data\n  * @return {Array}\n  */\n  static columns() {\n    return this.prototype.schema.columns;\n  }\n  /**\n  * Get the model's column names (fields)\n  * @return {Array}\n  */\n  static columnNames() {\n    return this.columns().map(v => v.name);\n  }\n\n  /**\n  * Get the model's column lookup data\n  * @return {Object}\n  */\n  static columnLookup() {\n    return this.columns().reduce((p, c) => {\n      p[c.name] = c;\n      return p;\n    }, {});\n  }\n\n  /**\n  * Check if the model has a column name in its schema\n  * @param {string} columnName\n  */\n  static hasColumn(columnName) {\n    return !!this.column(columnName);\n  }\n\n  /**\n  * Return the column schema data for a given name\n  * @param {string} columnName\n  */\n  static column(columnName) {\n    return this.prototype._columnLookup[columnName];\n  }\n\n  /**\n  * Get resource data for a model, for API responses and debug information\n  * @param {Array} arrInterface Array of strings representing output columns, or singularly-keyed objects representing relationships and their interface.\n  * @return {Object} Resource object for the model\n  * @deprecated\n  */\n  static toResource(arrInterface) {\n    if (!arrInterface || !arrInterface.length) {\n      arrInterface = this.columnNames().concat(Object.keys(this.prototype._joins).map(r => {\n        let obj = {};\n        obj[r] = this.joinInformation(r).Model.columnNames();\n        return obj;\n      }));\n    }\n    let columnLookup = this.columnLookup();\n    let resourceColumns = arrInterface.map(r => {\n      if (typeof r === 'string') {\n        let field = columnLookup[r];\n        if (!field) {\n          return null;\n        }\n        let fieldData = {\n          name: r,\n          type: field ? field.type : 'string'\n        };\n        field.array && (fieldData.array = true);\n        return fieldData;\n      } else if (typeof r === 'object' && r !== null) {\n        return null; // FIXME: Deprecated for relationships.\n\n        let key = Object.keys(r)[0];\n        let relationship = this.joinInformation(key);\n        if (!relationship) {\n          return null;\n        }\n        return relationship.Model.toResource(r[key]);\n      }\n    }).filter(r => r);\n    return {\n      name: this.name,\n      type: 'resource',\n      fields: resourceColumns\n    };\n  }\n\n  /**\n  * Set the database to be used for this model\n  * @param {Carthage.Database} db\n  */\n  static setDatabase(db) {\n    this.prototype.db = db;\n  }\n\n  /**\n  * Set the schema to be used for this model\n  * @param {Object} schema\n  */\n  static setSchema(schema) {\n    if (!schema) {\n      throw new Error([`Could not set Schema for ${this.name}.`, `Please make sure to run any outstanding migrations.`].join('\\n'));\n    }\n    this.prototype.schema = schema;\n    this.prototype._table = this.table();\n    this.prototype._columns = this.columns();\n    this.prototype._columnNames = this.columnNames();\n    this.prototype._columnLookup = this.columnLookup();\n    this.prototype._data = this.columnNames().reduce((p, c) => {\n      p[c] = null;\n      return p;\n    }, {});\n    this.prototype._changed = this.columnNames().reduce((p, c) => {\n      p[c] = false;\n      return p;\n    }, {});\n  }\n\n  /**\n  * FIXME\n  */\n  static relationships() {\n    return Relationships.of(this);\n  }\n\n  /**\n  * FIXME\n  */\n  static relationship(name) {\n    this._relationshipCache = this._relationshipCache || {};\n    this._relationshipCache[name] = this._relationshipCache[name] || this.relationships().findExplicit(name);\n    return this._relationshipCache[name];\n  }\n\n  /**\n  * Sets a joins relationship for the Model. Sets joinedBy relationship for parent.\n  * @param {class Carthage.Model} Model The Model class which your current model belongs to\n  * @param {Object} [options={}]\n  *   \"name\": The string name of the parent in the relationship (default to camelCase of Model name)\n  *   \"via\": Which field in current model represents this relationship, defaults to `${name}_id`\n  *   \"as\": What to display the name of the child as when joined to the parent (default to camelCase of child name)\n  *   \"multiple\": Whether the child exists in multiples for the parent (defaults to false)\n  */\n  static joinsTo(Model, options) {\n    return this.relationships().joinsTo(Model, options);\n  }\n\n  /**\n  * Create a validator. These run synchronously and check every time a field is set / cleared.\n  * @param {string} field The field you'd like to validate\n  * @param {string} message The error message shown if a validation fails.\n  * @param {function({any} value)} fnAction the validation to run - first parameter is the value you're testing.\n  */\n  static validates(field, message, fnAction) {\n    if (!this.prototype.hasOwnProperty('_validations')) {\n      this.prototype._validations = {};\n      this.prototype._validationsList = [];\n    }\n    ;\n    if (!this.prototype._validations[field]) {\n      this.prototype._validationsList.push(field);\n    }\n    this.prototype._validations[field] = this.prototype._validations[field] || [];\n    this.prototype._validations[field].push({\n      message: message,\n      action: fnAction\n    });\n  }\n\n  /**\n  * Creates a verifier. These run asynchronously, support multiple fields, and check every time you try to save a Model.\n  * @param {string} field The field applied to the verification.\n  * @param {string} message The error message shown if a verification fails.\n  * @param {function} fnAction The asynchronous verification method. The last argument passed is always a callback, and field names are determined by the argument names.\n  */\n  static verifies(field, message, fnAction) {\n    // Legacy support\n    if (arguments.length === 2) {\n      fnAction = message;\n      message = field;\n      field = null;\n    }\n    if (!this.prototype.hasOwnProperty('_verificationsList')) {\n      this.prototype._verificationsList = [];\n    }\n    ;\n    this.prototype._verificationsList.push({\n      field: field,\n      message: message,\n      action: fnAction,\n      fields: utilities.getFunctionParameters(fnAction).slice(0, -1)\n    });\n  }\n\n  /**\n  * Create a calculated field (in JavaScript). Must be synchronous.\n  * @param {string} calcField The name of the calculated field\n  * @param {function} fnCalculate The synchronous method to perform a calculation for.\n  *   Pass the names of the (non-computed) fields you'd like to use as parameters.\n  */\n  static calculates(calcField, fnCompute) {\n    if (!this.prototype.hasOwnProperty('_calculations')) {\n      this.prototype._calculations = {};\n      this.prototype._calculationsList = [];\n    }\n    if (this.prototype._calculations[calcField]) {\n      throw new Error(`Calculated field \"${calcField}\" for \"${this.name}\" already exists!`);\n    }\n    let columnLookup = this.columnLookup();\n    if (columnLookup[calcField]) {\n      throw new Error(`Cannot create calculated field \"${calcField}\" for \"${this.name}\", field already exists.`);\n    }\n    let fields = utilities.getFunctionParameters(fnCompute);\n    fields.forEach(f => {\n      if (!columnLookup[f]) {\n        throw new Error(`Calculation function error: \"${calcField} for \"${this.name}\" using field \"${f}\", \"${f}\" does not exist.`);\n      }\n    });\n    this.prototype._calculations[calcField] = {\n      calculate: fnCompute,\n      fields: fields\n    };\n    this.prototype._calculationsList.push(calcField);\n  }\n\n  /**\n  * Hides fields from being output in .toObject() (i.e. API responses), even if asked for\n  * @param {String} field\n  */\n  static hides(field) {\n    if (!this.prototype.hasOwnProperty('_hides')) {\n      this.prototype._hides = {};\n    }\n    this.prototype._hides[field] = true;\n    return true;\n  }\n\n  /**\n  * Tells us if a field is hidden (i.e. from API queries)\n  * @param {String} field\n  */\n  static isHidden(field) {\n    return this.prototype._hides[field] || false;\n  }\n\n  /**\n  * Prepare model for use\n  * @private\n  */\n  __initialize__() {\n    this._relationshipCache = {};\n    this._joinsCache = {};\n    this._joinsList = [];\n    this._data = Object.create(this._data); // Inherit from prototype\n    this._changed = Object.create(this._changed); // Inherit from prototype\n    this._errors = {};\n    return true;\n  }\n\n  /**\n  * Loads data into the model\n  * @private\n  * @param {Object} data Data to load into the model\n  * @param {optional boolean} fromStorage Specify if the model was loaded from storage. Defaults to false.\n  * @param {optional boolean} fromSeed Specify if the model was generated from a seed. Defaults to false.\n  */\n  __load__(data, fromStorage, fromSeed) {\n    data = data || {};\n    this._inStorage = !!fromStorage;\n    this._isSeeding = !!fromSeed;\n    if (!fromStorage) {\n      data.created_at = new Date();\n      data.updated_at = new Date();\n    }\n    let keys = Object.keys(data);\n    keys.forEach(key => {\n      this.__safeSet__(key, data[key]);\n      this._changed[key] = !fromStorage;\n    });\n    this.__validate__();\n    return this;\n  }\n\n  /**\n  * Validates provided fieldList (or all fields if not provided)\n  * @private\n  * @param {optional Array} fieldList fields to validate\n  */\n  __validate__(field) {\n    let data = this._data;\n    if (!field) {\n      let valid = true;\n      this._validationsList.forEach(field => valid = this.__validate__(field) && valid);\n      return valid;\n    } else if (!this._validations[field]) {\n      return true;\n    }\n    this.clearError(field);\n    let value = this._data[field];\n    return this._validations[field].filter(validation => {\n      let valid = validation.action.call(null, value);\n      !valid && this.setError(field, validation.message);\n      return valid;\n    }).length === 0;\n  }\n\n  /**\n  * Sets specified field data for the model, assuming data is safe and does not log changes\n  * @param {string} field Field to set\n  * @param {any} value Value for the field\n  */\n  __safeSet__(field, value) {\n    if (this.relationship(field)) {\n      return this.setJoined(field, value);\n    }\n    if (!this.hasField(field)) {\n      return;\n    }\n    this._data[field] = this.convert(field, value);\n  }\n\n  /**\n  * Indicates whethere or not the model is currently represented in hard storage (db).\n  * @return {boolean}\n  */\n  inStorage() {\n    return this._inStorage;\n  }\n\n  /**\n  * Indicates whethere or not the model is being generated from a seed.\n  * @return {boolean}\n  */\n  isSeeding() {\n    return this._isSeeding;\n  }\n\n  /**\n  * Tells us whether a model field has changed since we created it or loaded it from storage.\n  * @param {string} field The model field\n  * @return {boolean}\n  */\n  hasChanged(field) {\n    return field === undefined ? this.changedFields().length > 0 : !!this._changed[field];\n  }\n\n  /**\n  * Provides an array of all changed fields since model was created / loaded from storage\n  * @return {Array}\n  */\n  changedFields() {\n    let changed = this._changed;\n    return Object.keys(changed).filter(v => changed[v]);\n  }\n\n  /**\n  * Creates an error object for the model if any validations have failed, returns null otherwise\n  * @return {Error}\n  */\n  errorObject() {\n    let error = null;\n    if (this.hasErrors()) {\n      let errorObject = this.getErrors();\n      let message = errorObject._query || 'Validation error';\n      error = new Error(message);\n      error.details = errorObject;\n    }\n    return error;\n  }\n\n  /**\n  * Tells us whether or not the model has errors (failed validations)\n  * @return {boolean}\n  */\n  hasErrors() {\n    return Object.keys(this._errors).length > 0;\n  }\n\n  /**\n  * Gives us an error object with each errored field as a key, and each value\n  * being an array of failure messages from the validators\n  * @return {Object}\n  */\n  getErrors() {\n    let obj = {};\n    let errors = this._errors;\n    Object.keys(errors).forEach(function (key) {\n      obj[key] = errors[key];\n    });\n    return obj;\n  }\n\n  /**\n  * Reads new data into the model.\n  * @param {Object} data Data to inject into the model\n  * @return {this}\n  */\n  read(data) {\n    this.fieldList().concat(this._joinsList).filter(key => data.hasOwnProperty(key)).forEach(key => this.set(key, data[key]));\n    return this;\n  }\n\n  /**\n  * Converts a value to its intended format based on its field. Returns null if field not found.\n  * @param {string} field The field to use for conversion data\n  * @param {any} value The value to convert\n  */\n  convert(field, value) {\n    if (!this.hasField(field) || value === null || value === undefined) {\n      return null;\n    }\n    let dataType = this.getDataTypeOf(field);\n    if (this.isFieldArray(field)) {\n      return (value instanceof Array ? value : [value]).map(v => dataType.convert(v));\n    }\n    return dataType.convert(value);\n  }\n\n  /**\n  * Grabs the path of the given relationship from the RelationshipGraph\n  * @param {string} name the name of the relationship\n  */\n  relationship(name) {\n    return this.constructor.relationship(name);\n  }\n\n  /**\n  * Sets specified field data for the model. Logs and validates the change.\n  * @param {string} field Field to set\n  * @param {any} value Value for the field\n  */\n  set(field, value) {\n    if (!this.hasField(field)) {\n      throw new Error('Field ' + field + ' does not belong to model ' + this.constructor.name);\n    }\n    let curValue = this._data[field];\n    let changed = false;\n    value = this.convert(field, value);\n    if (value !== curValue) {\n      changed = true;\n      if (value instanceof Array && curValue instanceof Array && value.length === curValue.length) {\n        changed = false;\n        // If we have two equal length arrays, we must compare every value\n\n        for (let i = 0; i < value.length; i++) {\n          if (value[i] !== curValue[i]) {\n            changed = true;\n            break;\n          }\n        }\n      }\n\n      // If we have an object value (json), do a deterministic diff using\n      // node-deep-equals\n      // NOTE: Lets do an extra deep object test\n      if (utilities.isObject(value)) {\n        changed = !deepEqual(curValue, value, {\n          strict: true\n        });\n      }\n    }\n    this._data[field] = value;\n    this._changed[field] = changed;\n    changed && this.__validate__(field);\n    return value;\n  }\n\n  /**\n  * Set a joined object (Model or ModelArray)\n  * @param {string} field The field (name of the join relationship)\n  * @param {Model|ModelArray} value The joined model or array of models\n  */\n  setJoined(field, value) {\n    let relationship = this.relationship(field);\n    if (!relationship.multiple()) {\n      if (!(value instanceof relationship.getModel())) {\n        throw new Error(`${value} is not an instance of ${relationship.getModel().name}`);\n      }\n    } else {\n      if (!(value instanceof ModelArray) && ModelArray.Model !== relationship.getModel()) {\n        throw new Error(`${value} is not an instanceof ModelArray[${relationship.getModel().name}]`);\n      }\n    }\n    if (!this._joinsCache[field]) {\n      this._joinsList.push(field);\n    }\n    this._joinsCache[field] = value;\n    return value;\n  }\n\n  /**\n  * Calculate field from calculations (assumes it exists)\n  *  @param {string} field Name of the calculated field\n  */\n  calculate(field) {\n    let calc = this._calculations[field];\n    return calc.calculate.apply(this, calc.fields.map(f => this.get(f)));\n  }\n\n  /**\n  * Retrieve field data for the model.\n  * @param {string} field Field for which you'd like to retrieve data.\n  */\n  get(field, ignoreFormat) {\n    if (this._calculations[field]) {\n      return this.calculate(field);\n    }\n    let datum = this._data[field];\n    return !ignoreFormat && this.formatters[field] ? this.formatters[field](datum) : datum;\n  }\n\n  /**\n  * Retrieves joined Model or ModelArray\n  * @param {String} joinName the name of the join (list of connectors separated by __)\n  */\n  joined(joinName) {\n    return this._joinsCache[joinName];\n  }\n\n  /**\n  * Retrieve associated models joined this model from the database.\n  * @param {function({Error} err, {Carthage.Model|Carthage.ModelArray} model_1, ... {Carthage.Model|Carthage.ModelArray} model_n)}\n  *   Pass in a function with named parameters corresponding the relationships you'd like to retrieve.\n  *   The first parameter is always an error callback.\n  */\n  include(callback) {\n    let db = this.db;\n\n    // legacy support\n    if (arguments.length === 2) {\n      db = arguments[0];\n      callback = arguments[1];\n    }\n    let joinNames = utilities.getFunctionParameters(callback);\n    joinNames = joinNames.slice(1);\n    if (!joinNames.length) {\n      throw new Error('No valid relationships (1st parameter is error)');\n    }\n    let invalidJoinNames = joinNames.filter(r => !this.relationship(r));\n    if (invalidJoinNames.length) {\n      throw new Error(`Joins \"${invalidJoinNames.join('\", \"')}\" for model \"${this.constructor.name}\" do not exist.`);\n    }\n    let query = this.constructor.query().where({\n      id: this.get('id')\n    });\n    joinNames.forEach(joinName => query = query.join(joinName));\n    query.end((err, models) => {\n      if (err) {\n        return callback(err);\n      }\n      if (!models || !models.length) {\n        return callback(new Error('Could not fetch parent'));\n      }\n      let model = models[0];\n      let joins = joinNames.map(joinName => {\n        let join = model.joined(joinName);\n        join && this.setJoined(joinName, join);\n        return join;\n      });\n      return callback.apply(this, [null].concat(joins));\n    });\n  }\n  /**\n  * Creates a plain object from the Model, with properties matching an optional interface\n  * @param {Array} arrInterface Interface to use for object creation\n  */\n  toObject(arrInterface) {\n    let obj = {};\n    arrInterface = arrInterface || this.fieldList().concat(this._calculationsList).filter(key => !this._hides[key]);\n    arrInterface.forEach(key => {\n      if (this._hides[key]) {\n        return;\n      }\n      let joinObject;\n      if (typeof key === 'object' && key !== null) {\n        let subInterface = key;\n        key = Object.keys(key)[0];\n        joinObject = this._joinsCache[key];\n        joinObject && (obj[key] = joinObject.toObject(subInterface[key]));\n      } else if (this._data[key] !== undefined) {\n        obj[key] = this._data[key];\n      } else if (this._calculations[key] !== undefined) {\n        obj[key] = this.calculate(key);\n      } else if (joinObject = this._joinsCache[key]) {\n        obj[key] = joinObject.toObject();\n      }\n    });\n    return obj;\n  }\n\n  /**\n  * Get the table name for the model.\n  * @return {string}\n  */\n  tableName() {\n    return this._table;\n  }\n\n  /**\n  * Determine if the model has a specified field.\n  * @param {string} field\n  * @return {boolean}\n  */\n  hasField(field) {\n    return !!this._columnLookup[field];\n  }\n\n  /**\n  * Retrieve the schema field data for the specified field\n  * @param {string} field\n  * @return {Object}\n  */\n  getFieldData(field) {\n    return this._columnLookup[field];\n  }\n\n  /**\n  * Retrieve the schema data type for the specified field\n  * @param {string} field\n  * @return {string}\n  */\n  getDataTypeOf(field) {\n    return DataTypes[this._columnLookup[field].type];\n  }\n\n  /**\n  * Determine whether or not this field is an Array (PostgreSQL supports this)\n  * @param {string} field\n  * @return {boolean}\n  */\n  isFieldArray(field) {\n    let fieldData = this._columnLookup[field];\n    return !!(fieldData && fieldData.properties && fieldData.properties.array);\n  }\n\n  /**\n  * Determine whether or not this field is a primary key in our schema\n  * @param {string} field\n  * @return {boolean}\n  */\n  isFieldPrimaryKey(field) {\n    let fieldData = this._columnLookup[field];\n    return !!(fieldData && fieldData.properties && fieldData.properties.primary_key);\n  }\n\n  /**\n  * Retrieve the defaultValue for this field from our schema\n  * @param {string} field\n  * @return {any}\n  */\n  fieldDefaultValue(field) {\n    let fieldData = this._columnLookup[field];\n    return fieldData && fieldData.properties ? fieldData.properties.defaultValue : null;\n  }\n\n  /**\n  * Retrieve an array of fields for our model\n  * @return {Array}\n  */\n  fieldList() {\n    return this._columnNames.slice();\n  }\n\n  /**\n  * Retrieve our field schema definitions\n  * @return {Array}\n  */\n  fieldDefinitions() {\n    return this._columns.slice();\n  }\n\n  /**\n  * Set an error for a specified field (supports multiple errors)\n  * @param {string} key The specified field for which to create the error (or '*' for generic)\n  * @param {string} message The error message\n  * @return {boolean}\n  */\n  setError(key, message) {\n    this._errors[key] = this._errors[key] || [];\n    this._errors[key].push(message);\n    return true;\n  }\n\n  /**\n  * Clears all errors for a specified field\n  * @param {string} key The specified field for which to create the error (or '*' for generic)\n  * @return {boolean}\n  */\n  clearError(key) {\n    delete this._errors[key];\n    return true;\n  }\n  __generateSaveQuery__() {\n    let query, columns;\n    let db = this.db;\n    if (!this.inStorage()) {\n      columns = this.fieldList().filter(v => !this.isFieldPrimaryKey(v) && this.get(v, true) !== null);\n      query = db.adapter.generateInsertQuery(this.schema.table, columns);\n    } else {\n      columns = ['id'].concat(this.changedFields().filter(v => !this.isFieldPrimaryKey(v)));\n      query = db.adapter.generateUpdateQuery(this.schema.table, columns);\n    }\n    return {\n      sql: query,\n      params: columns.map(v => db.adapter.sanitize(this.getFieldData(v).type, this.get(v)))\n    };\n  }\n\n  /**\n  * Logic to execute before a model saves. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  beforeSave(callback) {\n    callback(null, this);\n  }\n\n  /**\n  * Logic to execute after a model saves. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  afterSave(callback) {\n    callback(null, this);\n  }\n\n  /**\n  * Save a model (execute beforeSave and afterSave)\n  * @param {Function} callback Callback to execute upon completion\n  */\n  save(callback) {\n    callback = callback || (() => {});\n    async.series([this.__verify__, this.beforeSave, this.__save__, this.afterSave].map(f => f.bind(this)), err => {\n      callback(err || null, this);\n    });\n  }\n\n  /**\n  * Runs an update query for this specific model instance\n  * @param {Object} fields Key-value pairs of fields to update\n  * @param {Function} callback Callback to execute upon completion\n  */\n  update(fields, callback) {\n    callback = callback || (() => {});\n    this.constructor.query().where({\n      id: this.get('id')\n    }).update(fields, (err, models) => callback(err, models && models[0]));\n  }\n\n  /**\n  * Runs all verifications before saving\n  * @param {function} callback Method to execute upon completion. Returns true if OK, false if failed\n  * @private\n  */\n  __verify__(callback) {\n    // Run through verifications in order they were added\n    async.series(this._verificationsList.map(verification => {\n      return callback => {\n        verification.action.apply(this, verification.fields.map(field => this.get(field)).concat(bool => {\n          if (bool) {\n            callback(null);\n          } else {\n            if (verification.field) {\n              this.setError(verification.field, verification.message);\n              callback(null);\n            } else {\n              callback(new Error(verification.message));\n            }\n          }\n        }));\n      };\n    }), err => {\n      if (this.hasErrors()) {\n        return callback.call(this, this.errorObject());\n      } else if (err) {\n        return callback.call(this, err);\n      }\n      callback(null);\n    });\n  }\n\n  /**\n  * Saves model to database\n  * @param {function} callback Method to execute upon completion, returns error if failed (including validations didn't pass)\n  * @private\n  */\n  __save__(callback) {\n    let db = this.db;\n\n    // Legacy --- FIXME: Deprecated. Can remove for 1.0\n    if (arguments.length === 2) {\n      db = arguments[0];\n      callback = arguments[1];\n    }\n    if (typeof callback !== 'function') {\n      callback = function () {};\n    }\n    if (this.fieldList().indexOf('updated_at') !== -1) {\n      this.set('updated_at', new Date());\n    }\n    let query = this.__generateSaveQuery__();\n    db.query(query.sql, query.params, (err, result) => {\n      if (err) {\n        this.setError('_query', err.message);\n      } else {\n        result.rows.length && this.__load__(result.rows[0], true);\n      }\n      callback.call(this, this.errorObject());\n    });\n  }\n\n  /**\n  * Destroys model and cascades all deletes.\n  * @param {function} callback method to run upon completion\n  */\n  destroyCascade(callback) {\n    ModelArray.from([this]).destroyCascade(callback);\n  }\n\n  /**\n  * Logic to execute before a model gets destroyed. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  beforeDestroy(callback) {\n    callback(null, this);\n  }\n\n  /**\n  * Logic to execute after a model is destroyed. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  afterDestroy(callback) {\n    callback(null, this);\n  }\n\n  /**\n  * Destroys model reference in database.\n  * @param {function({Error} err, {Carthage.Model} model)} callback\n  *   Method to execute upon completion, returns error if failed\n  */\n  destroy(callback) {\n    callback = callback || (() => {});\n    async.series([this.beforeDestroy, this.__destroy__, this.afterDestroy].map(f => f.bind(this)), err => {\n      callback(err || null, this);\n    });\n  }\n\n  /**\n  * Destroys model reference in database\n  * @param {function} callback Method to execute upon completion, returns error if failed\n  * @private\n  */\n  __destroy__(callback) {\n    let db = this.db;\n\n    // Legacy\n    if (arguments.length === 2) {\n      db = arguments[0];\n      callback = arguments[1];\n    }\n    let model = this;\n    if (!(db instanceof Database)) {\n      throw new Error('Must provide a valid Database to save to');\n    }\n    if (typeof callback !== 'function') {\n      callback = function () {};\n    }\n    if (!model.inStorage()) {\n      setTimeout(callback.bind(model, {\n        '_query': 'Model has not been saved'\n      }, model), 1);\n      return;\n    }\n    let columns = model.fieldList().filter(function (v) {\n      return model.isFieldPrimaryKey(v);\n    });\n    let query = db.adapter.generateDeleteQuery(model.schema.table, columns);\n    db.query(query, columns.map(function (v) {\n      return db.adapter.sanitize(model.getFieldData(v).type, model.get(v, true));\n    }), function (err, result) {\n      if (err) {\n        model.setError('_query', err.message);\n      } else {\n        model._inStorage = false;\n      }\n      callback.call(model, err, model);\n    });\n  }\n}\nModel.prototype.schema = {\n  table: '',\n  columns: []\n};\nModel.prototype._validations = {};\nModel.prototype._validationsList = [];\nModel.prototype._calculations = {};\nModel.prototype._calculationsList = [];\nModel.prototype._verificationsList = [];\nModel.prototype._hides = {};\nModel.prototype.formatters = {};\nModel.prototype.data = null;\nModel.prototype.db = null;\nModel.prototype.externalInterface = ['id', 'created_at', 'updated_at'];\nModel.prototype.aggregateBy = {\n  'id': 'count',\n  'created_at': 'min',\n  'updated_at': 'min'\n};\nmodule.exports = Model;","map":{"version":3,"names":["DataTypes","require","Database","Composer","ModelArray","utilities","async","inflect","deepEqual","RelationshipGraph","Relationships","Model","constructor","modelData","fromStorage","fromSeed","__initialize__","__load__","find","id","callback","db","prototype","arguments","length","where","end","err","models","Error","name","notFound","findBy","field","value","query","create","data","model","save","findOrCreateBy","update","read","destroy","table","schema","columns","columnNames","map","v","columnLookup","reduce","p","c","hasColumn","columnName","column","_columnLookup","toResource","arrInterface","concat","Object","keys","_joins","r","obj","joinInformation","resourceColumns","fieldData","type","array","key","relationship","filter","fields","setDatabase","setSchema","join","_table","_columns","_columnNames","_data","_changed","relationships","of","_relationshipCache","findExplicit","joinsTo","options","validates","message","fnAction","hasOwnProperty","_validations","_validationsList","push","action","verifies","_verificationsList","getFunctionParameters","slice","calculates","calcField","fnCompute","_calculations","_calculationsList","forEach","f","calculate","hides","_hides","isHidden","_joinsCache","_joinsList","_errors","_inStorage","_isSeeding","created_at","Date","updated_at","__safeSet__","__validate__","valid","clearError","validation","call","setError","setJoined","hasField","convert","inStorage","isSeeding","hasChanged","undefined","changedFields","changed","errorObject","error","hasErrors","getErrors","_query","details","errors","fieldList","set","dataType","getDataTypeOf","isFieldArray","Array","curValue","i","isObject","strict","multiple","getModel","calc","apply","get","ignoreFormat","datum","formatters","joined","joinName","include","joinNames","invalidJoinNames","joins","toObject","joinObject","subInterface","tableName","getFieldData","properties","isFieldPrimaryKey","primary_key","fieldDefaultValue","defaultValue","fieldDefinitions","__generateSaveQuery__","adapter","generateInsertQuery","generateUpdateQuery","sql","params","sanitize","beforeSave","afterSave","series","__verify__","__save__","bind","verification","bool","indexOf","result","rows","destroyCascade","from","beforeDestroy","afterDestroy","__destroy__","setTimeout","generateDeleteQuery","externalInterface","aggregateBy","module","exports"],"sources":["/Users/apps/node_modules/carthage/core/required/model.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('./db/data_types.js');\nconst Database = require('./db/database.js');\nconst Composer = require('./composer.js');\n\nconst ModelArray = require('./model_array.js');\n\nconst utilities = require('./utilities.js');\nconst async = require('async');\nconst inflect = require('i')();\nconst deepEqual = require('deep-equal');\n\nconst RelationshipGraph = require('./relationship_graph.js');\nconst Relationships = new RelationshipGraph();\n\n/**\n* Basic Model implementation. Optionally interfaces with database.\n* @class\n*/\nclass Model {\n\n  /**\n  * @param {Object} modelData Data to load into the object\n  * @param {optional boolean} fromStorage Is this model being loaded from storage? Defaults to false.\n  * @param {option boolean} fromSeed Is this model being seeded?\n  */\n  constructor(modelData, fromStorage, fromSeed) {\n\n    modelData = modelData || {};\n\n    this.__initialize__();\n    this.__load__(modelData, fromStorage, fromSeed);\n\n  }\n\n  /**\n  * Finds a model with a provided id, otherwise returns a notFound error.\n  * @param {number} id The id of the model you're looking for\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static find(id, callback) {\n\n    let db = this.prototype.db;\n\n    // legacy support\n    if (arguments.length === 3) {\n      db = arguments[0];\n      id = arguments[1];\n      callback = arguments[2];\n    }\n\n    return new Composer(this)\n      .where({id: id})\n      .end((err, models) => {\n\n        if (!err && !models.length) {\n          let err = new Error(`Could not find ${this.name} with id \"${id}\".`);\n          err.notFound = true;\n          return callback(err);\n        }\n\n        callback(err, models[0]);\n\n      });\n\n  }\n\n  /**\n  * Finds a model with a provided field, value pair. Returns the first found.\n  * @param {string} field Name of the field\n  * @param {any} value Value of the named field to compare against\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static findBy(field, value, callback) {\n\n    let db = this.prototype.db;\n    let query = {};\n    query[field] = value;\n\n    return new Composer(this)\n      .where(query)\n      .end((err, models) => {\n\n        if (!err && !models.length) {\n          let err = new Error(`Could not find ${this.name} with ${field} \"${value}\".`);\n          err.notFound = true;\n          return callback(err);\n        }\n\n        callback(err, models[0]);\n\n      });\n\n  }\n\n  /**\n  * Creates a new model instance using the provided data.\n  * @param {object} data The data to load into the object.\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static create(data, callback) {\n\n    let model = new this(data);\n    model.save(callback);\n\n  }\n\n  /**\n  * Finds a model with a provided field, value pair. Returns the first found.\n  * @param {string} field Name of the field\n  * @param {object} data Key-value pairs of Model creation data. Will use appropriate value to query for based on \"field\" parametere.\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static findOrCreateBy(field, data, callback) {\n\n    this.findBy(field, data[field], (err, model) => {\n\n      if (err) {\n        if (err.notFound) {\n          return this.create(data, callback);\n        } else {\n          return callback(err);\n        }\n      } else {\n        return callback(null, model);\n      }\n\n    });\n\n  }\n\n  /**\n  * Finds and updates a model with a specified id. Return a notFound error if model does not exist.\n  * @param {number} id The id of the model you're looking for\n  * @param {object} data The data to load into the object.\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static update(id, data, callback) {\n\n    this.find(id, (err, model) => {\n\n      if (err) {\n        return callback(err);\n      }\n\n      model.read(data);\n      model.save(callback);\n\n    });\n\n  }\n\n  /**\n  * Finds and destroys a model with a specified id. Return a notFound error if model does not exist.\n  * @param {number} id The id of the model you're looking for\n  * @param {function({Error} err, {Carthage.Model} model)} callback The callback to execute upon completion\n  */\n  static destroy(id, callback) {\n\n    this.find(id, (err, model) => {\n\n      if (err) {\n        return callback(err);\n      }\n\n      model.destroy(callback);\n\n    });\n\n  }\n\n  /**\n  * Creates a new Composer (ORM) instance to begin a new query.\n  * @param {optional Carthage.Database} db Deprecated - provide a database to query from. Set the model's db in its constructor file, instead.\n  * @return {Carthage.Composer}\n  */\n  static query(db) {\n\n    db = db || this.prototype.db;\n    return new Composer(this);\n\n  }\n\n  /**\n  * Get the model's table name\n  * @return {string}\n  */\n  static table() {\n    return this.prototype.schema.table;\n  }\n\n  /**\n  * Get the model's column data\n  * @return {Array}\n  */\n  static columns() {\n    return this.prototype.schema.columns;\n  };\n\n  /**\n  * Get the model's column names (fields)\n  * @return {Array}\n  */\n  static columnNames() {\n    return this.columns().map(v => v.name);\n  }\n\n  /**\n  * Get the model's column lookup data\n  * @return {Object}\n  */\n  static columnLookup() {\n    return this.columns().reduce((p, c) => {\n      p[c.name] = c;\n      return p;\n    }, {});\n  }\n\n  /**\n  * Check if the model has a column name in its schema\n  * @param {string} columnName\n  */\n  static hasColumn(columnName) {\n    return !!this.column(columnName);\n  }\n\n  /**\n  * Return the column schema data for a given name\n  * @param {string} columnName\n  */\n  static column(columnName) {\n    return this.prototype._columnLookup[columnName];\n  }\n\n  /**\n  * Get resource data for a model, for API responses and debug information\n  * @param {Array} arrInterface Array of strings representing output columns, or singularly-keyed objects representing relationships and their interface.\n  * @return {Object} Resource object for the model\n  * @deprecated\n  */\n  static toResource(arrInterface) {\n\n    if (!arrInterface || !arrInterface.length) {\n      arrInterface = this.columnNames().concat(\n        Object.keys(this.prototype._joins)\n          .map(r => {\n            let obj = {};\n            obj[r] = this.joinInformation(r).Model.columnNames();\n            return obj;\n          })\n      );\n    }\n\n\n    let columnLookup = this.columnLookup();\n\n    let resourceColumns = arrInterface.map(r => {\n\n      if (typeof r === 'string') {\n\n        let field = columnLookup[r];\n\n        if (!field) {\n          return null;\n        }\n\n        let fieldData = {\n          name: r,\n          type: field ? field.type : 'string'\n        };\n\n        field.array && (fieldData.array = true);\n\n        return fieldData;\n\n      } else if (typeof r === 'object' && r !== null) {\n\n        return null; // FIXME: Deprecated for relationships.\n\n        let key = Object.keys(r)[0];\n        let relationship = this.joinInformation(key);\n\n        if (!relationship) {\n          return null;\n        }\n\n        return relationship.Model.toResource(r[key]);\n\n      }\n\n    }).filter(r => r);\n\n    return {\n      name: this.name,\n      type: 'resource',\n      fields: resourceColumns\n    };\n\n  }\n\n  /**\n  * Set the database to be used for this model\n  * @param {Carthage.Database} db\n  */\n  static setDatabase(db) {\n\n    this.prototype.db = db;\n\n  }\n\n  /**\n  * Set the schema to be used for this model\n  * @param {Object} schema\n  */\n  static setSchema(schema) {\n\n    if (!schema) {\n      throw new Error([\n        `Could not set Schema for ${this.name}.`,\n        `Please make sure to run any outstanding migrations.`\n      ].join('\\n'));\n    }\n\n    this.prototype.schema = schema;\n\n    this.prototype._table = this.table();\n    this.prototype._columns = this.columns();\n    this.prototype._columnNames = this.columnNames();\n    this.prototype._columnLookup = this.columnLookup();\n\n    this.prototype._data = this.columnNames()\n      .reduce((p, c) => {\n        p[c] = null;\n        return p;\n      }, {});\n\n    this.prototype._changed = this.columnNames()\n      .reduce((p, c) => {\n        p[c] = false;\n        return p;\n      }, {});\n\n  }\n\n  /**\n  * FIXME\n  */\n  static relationships() {\n\n    return Relationships.of(this);\n\n  }\n\n  /**\n  * FIXME\n  */\n  static relationship(name) {\n\n    this._relationshipCache = this._relationshipCache || {};\n    this._relationshipCache[name] = (this._relationshipCache[name] || this.relationships().findExplicit(name));\n    return this._relationshipCache[name];\n\n  }\n\n  /**\n  * Sets a joins relationship for the Model. Sets joinedBy relationship for parent.\n  * @param {class Carthage.Model} Model The Model class which your current model belongs to\n  * @param {Object} [options={}]\n  *   \"name\": The string name of the parent in the relationship (default to camelCase of Model name)\n  *   \"via\": Which field in current model represents this relationship, defaults to `${name}_id`\n  *   \"as\": What to display the name of the child as when joined to the parent (default to camelCase of child name)\n  *   \"multiple\": Whether the child exists in multiples for the parent (defaults to false)\n  */\n  static joinsTo(Model, options) {\n\n    return this.relationships().joinsTo(Model, options);\n\n  }\n\n  /**\n  * Create a validator. These run synchronously and check every time a field is set / cleared.\n  * @param {string} field The field you'd like to validate\n  * @param {string} message The error message shown if a validation fails.\n  * @param {function({any} value)} fnAction the validation to run - first parameter is the value you're testing.\n  */\n  static validates(field, message, fnAction) {\n\n    if (!this.prototype.hasOwnProperty('_validations')) {\n      this.prototype._validations = {};\n      this.prototype._validationsList = [];\n    };\n\n    if (!this.prototype._validations[field]) {\n      this.prototype._validationsList.push(field);\n    }\n\n    this.prototype._validations[field] = this.prototype._validations[field] || [];\n    this.prototype._validations[field].push({message: message, action: fnAction});\n\n  }\n\n  /**\n  * Creates a verifier. These run asynchronously, support multiple fields, and check every time you try to save a Model.\n  * @param {string} field The field applied to the verification.\n  * @param {string} message The error message shown if a verification fails.\n  * @param {function} fnAction The asynchronous verification method. The last argument passed is always a callback, and field names are determined by the argument names.\n  */\n  static verifies(field, message, fnAction) {\n\n    // Legacy support\n    if (arguments.length === 2) {\n      fnAction = message;\n      message = field;\n      field = null;\n    }\n\n    if (!this.prototype.hasOwnProperty('_verificationsList')) {\n      this.prototype._verificationsList = [];\n    };\n\n    this.prototype._verificationsList.push({\n      field: field,\n      message: message,\n      action: fnAction,\n      fields: utilities.getFunctionParameters(fnAction).slice(0, -1)\n    });\n\n  }\n\n  /**\n  * Create a calculated field (in JavaScript). Must be synchronous.\n  * @param {string} calcField The name of the calculated field\n  * @param {function} fnCalculate The synchronous method to perform a calculation for.\n  *   Pass the names of the (non-computed) fields you'd like to use as parameters.\n  */\n  static calculates(calcField, fnCompute) {\n\n    if (!this.prototype.hasOwnProperty('_calculations')) {\n      this.prototype._calculations = {};\n      this.prototype._calculationsList = [];\n    }\n\n    if (this.prototype._calculations[calcField]) {\n      throw new Error(`Calculated field \"${calcField}\" for \"${this.name}\" already exists!`);\n    }\n\n    let columnLookup = this.columnLookup();\n\n    if (columnLookup[calcField]) {\n      throw new Error(`Cannot create calculated field \"${calcField}\" for \"${this.name}\", field already exists.`);\n    }\n\n    let fields = utilities.getFunctionParameters(fnCompute);\n\n    fields.forEach(f => {\n      if (!columnLookup[f]) {\n        throw new Error(`Calculation function error: \"${calcField} for \"${this.name}\" using field \"${f}\", \"${f}\" does not exist.`)\n      }\n    });\n\n    this.prototype._calculations[calcField] = {\n      calculate: fnCompute,\n      fields: fields\n    };\n\n    this.prototype._calculationsList.push(calcField);\n\n  }\n\n  /**\n  * Hides fields from being output in .toObject() (i.e. API responses), even if asked for\n  * @param {String} field\n  */\n  static hides(field) {\n\n    if (!this.prototype.hasOwnProperty('_hides')) {\n      this.prototype._hides = {};\n    }\n\n    this.prototype._hides[field] = true;\n    return true;\n\n  }\n\n  /**\n  * Tells us if a field is hidden (i.e. from API queries)\n  * @param {String} field\n  */\n  static isHidden(field) {\n\n    return this.prototype._hides[field] || false;\n\n  }\n\n  /**\n  * Prepare model for use\n  * @private\n  */\n  __initialize__() {\n\n    this._relationshipCache = {};\n\n    this._joinsCache = {};\n    this._joinsList = [];\n\n    this._data = Object.create(this._data); // Inherit from prototype\n    this._changed = Object.create(this._changed); // Inherit from prototype\n    this._errors = {};\n\n    return true;\n\n  }\n\n  /**\n  * Loads data into the model\n  * @private\n  * @param {Object} data Data to load into the model\n  * @param {optional boolean} fromStorage Specify if the model was loaded from storage. Defaults to false.\n  * @param {optional boolean} fromSeed Specify if the model was generated from a seed. Defaults to false.\n  */\n  __load__(data, fromStorage, fromSeed) {\n\n    data = data || {};\n\n    this._inStorage = !!fromStorage;\n    this._isSeeding = !!fromSeed;\n\n    if (!fromStorage) {\n      data.created_at = new Date();\n      data.updated_at = new Date();\n    }\n\n    let keys = Object.keys(data);\n\n    keys.forEach(key => {\n      this.__safeSet__(key, data[key]);\n      this._changed[key] = !fromStorage\n    });\n\n    this.__validate__();\n\n    return this;\n\n  }\n\n  /**\n  * Validates provided fieldList (or all fields if not provided)\n  * @private\n  * @param {optional Array} fieldList fields to validate\n  */\n  __validate__(field) {\n\n    let data = this._data;\n\n    if (!field) {\n\n      let valid = true;\n      this._validationsList.forEach(field => valid = (this.__validate__(field) && valid));\n      return valid;\n\n    } else if (!this._validations[field]) {\n\n      return true;\n\n    }\n\n    this.clearError(field);\n    let value = this._data[field];\n\n    return this._validations[field].filter(validation => {\n      let valid = validation.action.call(null, value);\n      !valid && this.setError(field, validation.message);\n      return valid;\n    }).length === 0;\n\n  }\n\n  /**\n  * Sets specified field data for the model, assuming data is safe and does not log changes\n  * @param {string} field Field to set\n  * @param {any} value Value for the field\n  */\n  __safeSet__(field, value) {\n\n    if (this.relationship(field)) {\n\n      return this.setJoined(field, value);\n\n    }\n\n    if (!this.hasField(field)) {\n\n      return;\n\n    }\n\n    this._data[field] = this.convert(field, value);\n\n  }\n\n  /**\n  * Indicates whethere or not the model is currently represented in hard storage (db).\n  * @return {boolean}\n  */\n  inStorage() {\n    return this._inStorage;\n  }\n\n  /**\n  * Indicates whethere or not the model is being generated from a seed.\n  * @return {boolean}\n  */\n  isSeeding() {\n    return this._isSeeding;\n  }\n\n  /**\n  * Tells us whether a model field has changed since we created it or loaded it from storage.\n  * @param {string} field The model field\n  * @return {boolean}\n  */\n  hasChanged(field) {\n    return field === undefined ? this.changedFields().length > 0 : !!this._changed[field];\n  }\n\n  /**\n  * Provides an array of all changed fields since model was created / loaded from storage\n  * @return {Array}\n  */\n  changedFields() {\n    let changed = this._changed;\n    return Object.keys(changed).filter(v => changed[v]);\n  }\n\n  /**\n  * Creates an error object for the model if any validations have failed, returns null otherwise\n  * @return {Error}\n  */\n  errorObject() {\n\n    let error = null;\n\n    if (this.hasErrors()) {\n\n      let errorObject = this.getErrors();\n      let message = errorObject._query || 'Validation error';\n\n      error = new Error(message);\n      error.details = errorObject;\n\n    }\n\n    return error;\n\n  }\n\n  /**\n  * Tells us whether or not the model has errors (failed validations)\n  * @return {boolean}\n  */\n  hasErrors() {\n\n    return Object.keys(this._errors).length > 0;\n\n  }\n\n  /**\n  * Gives us an error object with each errored field as a key, and each value\n  * being an array of failure messages from the validators\n  * @return {Object}\n  */\n  getErrors() {\n    let obj = {};\n    let errors = this._errors;\n    Object.keys(errors).forEach(function(key) {\n      obj[key] = errors[key];\n    });\n    return obj;\n  }\n\n  /**\n  * Reads new data into the model.\n  * @param {Object} data Data to inject into the model\n  * @return {this}\n  */\n  read(data) {\n\n    this.fieldList()\n      .concat(this._joinsList)\n      .filter((key) => data.hasOwnProperty(key))\n      .forEach((key) => this.set(key, data[key]));\n\n    return this;\n\n  }\n\n  /**\n  * Converts a value to its intended format based on its field. Returns null if field not found.\n  * @param {string} field The field to use for conversion data\n  * @param {any} value The value to convert\n  */\n  convert(field, value) {\n\n    if (!this.hasField(field) || value === null || value === undefined) {\n      return null;\n    }\n\n    let dataType = this.getDataTypeOf(field);\n\n    if (this.isFieldArray(field)) {\n      return (value instanceof Array ? value : [value]).map(v => dataType.convert(v));\n    }\n\n    return dataType.convert(value);\n\n  }\n\n  /**\n  * Grabs the path of the given relationship from the RelationshipGraph\n  * @param {string} name the name of the relationship\n  */\n  relationship(name) {\n    return this.constructor.relationship(name);\n  }\n\n  /**\n  * Sets specified field data for the model. Logs and validates the change.\n  * @param {string} field Field to set\n  * @param {any} value Value for the field\n  */\n  set(field, value) {\n\n    if (!this.hasField(field)) {\n\n      throw new Error('Field ' + field + ' does not belong to model ' + this.constructor.name);\n\n    }\n\n    let curValue = this._data[field];\n    let changed = false;\n    value = this.convert(field, value);\n\n    if (value !== curValue) {\n\n      changed = true;\n\n      if (\n        value instanceof Array &&\n        curValue instanceof Array &&\n        value.length === curValue.length\n      ) {\n\n        changed = false;\n        // If we have two equal length arrays, we must compare every value\n\n        for (let i = 0; i < value.length; i++) {\n          if (value[i] !== curValue[i]) {\n            changed = true;\n            break;\n          }\n        }\n      }\n\n      // If we have an object value (json), do a deterministic diff using\n      // node-deep-equals\n      // NOTE: Lets do an extra deep object test\n      if ( utilities.isObject(value) ) {\n        changed = !deepEqual( curValue, value, { strict: true});\n      }\n\n    }\n\n    this._data[field] = value;\n    this._changed[field] = changed;\n    changed && this.__validate__(field);\n\n    return value;\n\n  }\n\n  /**\n  * Set a joined object (Model or ModelArray)\n  * @param {string} field The field (name of the join relationship)\n  * @param {Model|ModelArray} value The joined model or array of models\n  */\n  setJoined(field, value) {\n\n    let relationship = this.relationship(field);\n\n    if (!relationship.multiple()) {\n\n      if (!(value instanceof relationship.getModel())) {\n\n        throw new Error(`${value} is not an instance of ${relationship.getModel().name}`);\n\n      }\n\n    } else {\n\n      if (!(value instanceof ModelArray) && ModelArray.Model !== relationship.getModel()) {\n\n        throw new Error(`${value} is not an instanceof ModelArray[${relationship.getModel().name}]`);\n\n      }\n\n    }\n\n    if (!this._joinsCache[field]) {\n      this._joinsList.push(field);\n    }\n\n    this._joinsCache[field] = value;\n\n    return value;\n\n  }\n\n  /**\n  * Calculate field from calculations (assumes it exists)\n  *  @param {string} field Name of the calculated field\n  */\n  calculate(field) {\n    let calc = this._calculations[field];\n    return calc.calculate.apply(\n      this,\n      calc.fields.map(f => this.get(f))\n    );\n  }\n\n  /**\n  * Retrieve field data for the model.\n  * @param {string} field Field for which you'd like to retrieve data.\n  */\n  get(field, ignoreFormat) {\n\n    if (this._calculations[field]) {\n      return this.calculate(field);\n    }\n\n    let datum = this._data[field];\n    return (!ignoreFormat && this.formatters[field]) ? this.formatters[field](datum) : datum;\n\n  }\n\n  /**\n  * Retrieves joined Model or ModelArray\n  * @param {String} joinName the name of the join (list of connectors separated by __)\n  */\n  joined(joinName) {\n\n    return this._joinsCache[joinName];\n\n  }\n\n  /**\n  * Retrieve associated models joined this model from the database.\n  * @param {function({Error} err, {Carthage.Model|Carthage.ModelArray} model_1, ... {Carthage.Model|Carthage.ModelArray} model_n)}\n  *   Pass in a function with named parameters corresponding the relationships you'd like to retrieve.\n  *   The first parameter is always an error callback.\n  */\n  include(callback) {\n\n    let db = this.db;\n\n    // legacy support\n    if (arguments.length === 2) {\n      db = arguments[0];\n      callback = arguments[1];\n    }\n\n    let joinNames = utilities.getFunctionParameters(callback);\n    joinNames = joinNames.slice(1);\n\n    if (!joinNames.length) {\n      throw new Error('No valid relationships (1st parameter is error)');\n    }\n\n    let invalidJoinNames = joinNames.filter(r => !this.relationship(r));\n\n    if (invalidJoinNames.length) {\n      throw new Error(`Joins \"${invalidJoinNames.join('\", \"')}\" for model \"${this.constructor.name}\" do not exist.`);\n    }\n\n    let query = this.constructor.query().where({id: this.get('id')});\n\n    joinNames.forEach(joinName => query = query.join(joinName));\n\n    query.end((err, models) => {\n\n      if (err) {\n        return callback(err);\n      }\n\n      if (!models || !models.length) {\n        return callback(new Error('Could not fetch parent'));\n      }\n\n      let model = models[0];\n      let joins = joinNames.map(joinName => {\n        let join = model.joined(joinName);\n        join && this.setJoined(joinName, join);\n        return join;\n      });\n\n      return callback.apply(this, [null].concat(joins));\n\n    });\n\n  };\n\n  /**\n  * Creates a plain object from the Model, with properties matching an optional interface\n  * @param {Array} arrInterface Interface to use for object creation\n  */\n  toObject(arrInterface) {\n\n    let obj = {};\n\n    arrInterface = arrInterface ||\n      this.fieldList()\n      .concat(this._calculationsList)\n      .filter(key => !this._hides[key]);\n\n    arrInterface.forEach(key => {\n\n      if (this._hides[key]) {\n        return;\n      }\n\n      let joinObject;\n\n      if (typeof key === 'object' && key !== null) {\n        let subInterface = key;\n        key = Object.keys(key)[0];\n        joinObject = this._joinsCache[key];\n        joinObject && (obj[key] = joinObject.toObject(subInterface[key]));\n      } else if (this._data[key] !== undefined) {\n        obj[key] = this._data[key];\n      } else if (this._calculations[key] !== undefined) {\n        obj[key] = this.calculate(key);\n      } else if (joinObject = this._joinsCache[key]) {\n        obj[key] = joinObject.toObject();\n      }\n\n    });\n\n    return obj;\n\n  }\n\n  /**\n  * Get the table name for the model.\n  * @return {string}\n  */\n  tableName() {\n    return this._table;\n  }\n\n  /**\n  * Determine if the model has a specified field.\n  * @param {string} field\n  * @return {boolean}\n  */\n  hasField(field) {\n    return !!this._columnLookup[field];\n  }\n\n  /**\n  * Retrieve the schema field data for the specified field\n  * @param {string} field\n  * @return {Object}\n  */\n  getFieldData(field) {\n    return this._columnLookup[field];\n  }\n\n  /**\n  * Retrieve the schema data type for the specified field\n  * @param {string} field\n  * @return {string}\n  */\n  getDataTypeOf(field) {\n    return DataTypes[this._columnLookup[field].type];\n  }\n\n  /**\n  * Determine whether or not this field is an Array (PostgreSQL supports this)\n  * @param {string} field\n  * @return {boolean}\n  */\n  isFieldArray(field) {\n    let fieldData = this._columnLookup[field];\n    return !!(fieldData && fieldData.properties && fieldData.properties.array);\n  }\n\n  /**\n  * Determine whether or not this field is a primary key in our schema\n  * @param {string} field\n  * @return {boolean}\n  */\n  isFieldPrimaryKey(field) {\n    let fieldData = this._columnLookup[field];\n    return !!(fieldData && fieldData.properties && fieldData.properties.primary_key);\n  }\n\n  /**\n  * Retrieve the defaultValue for this field from our schema\n  * @param {string} field\n  * @return {any}\n  */\n  fieldDefaultValue(field) {\n    let fieldData = this._columnLookup[field];\n    return fieldData && fieldData.properties ? fieldData.properties.defaultValue : null;\n  }\n\n  /**\n  * Retrieve an array of fields for our model\n  * @return {Array}\n  */\n  fieldList() {\n    return this._columnNames.slice();\n  }\n\n  /**\n  * Retrieve our field schema definitions\n  * @return {Array}\n  */\n  fieldDefinitions() {\n    return this._columns.slice();\n  }\n\n  /**\n  * Set an error for a specified field (supports multiple errors)\n  * @param {string} key The specified field for which to create the error (or '*' for generic)\n  * @param {string} message The error message\n  * @return {boolean}\n  */\n  setError(key, message) {\n    this._errors[key] = this._errors[key] || [];\n    this._errors[key].push(message);\n    return true;\n  }\n\n  /**\n  * Clears all errors for a specified field\n  * @param {string} key The specified field for which to create the error (or '*' for generic)\n  * @return {boolean}\n  */\n  clearError(key) {\n    delete this._errors[key];\n    return true;\n  }\n\n  __generateSaveQuery__() {\n\n    let query, columns;\n    let db = this.db;\n\n    if (!this.inStorage()) {\n\n      columns = this.fieldList().filter(v => !this.isFieldPrimaryKey(v) && this.get(v, true) !== null);\n      query = db.adapter.generateInsertQuery(this.schema.table, columns);\n\n    } else {\n\n      columns = ['id'].concat(this.changedFields().filter(v => !this.isFieldPrimaryKey(v)));\n      query = db.adapter.generateUpdateQuery(this.schema.table, columns);\n\n    }\n\n    return {\n      sql: query,\n      params: columns.map(v => db.adapter.sanitize(this.getFieldData(v).type, this.get(v)))\n    };\n\n  }\n\n  /**\n  * Logic to execute before a model saves. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  beforeSave(callback) {\n\n    callback(null, this);\n\n  }\n\n  /**\n  * Logic to execute after a model saves. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  afterSave(callback) {\n\n    callback(null, this);\n\n  }\n\n  /**\n  * Save a model (execute beforeSave and afterSave)\n  * @param {Function} callback Callback to execute upon completion\n  */\n  save(callback) {\n\n    callback = callback || (() => {});\n\n    async.series([\n      this.__verify__,\n      this.beforeSave,\n      this.__save__,\n      this.afterSave\n    ].map(f => f.bind(this)), (err) => {\n      callback(err || null, this);\n    });\n\n  }\n\n  /**\n  * Runs an update query for this specific model instance\n  * @param {Object} fields Key-value pairs of fields to update\n  * @param {Function} callback Callback to execute upon completion\n  */\n  update(fields, callback) {\n\n    callback = callback || (() => {});\n\n    this.constructor.query()\n      .where({id: this.get('id')})\n      .update(fields, (err, models) => callback(err, models && models[0]));\n\n  }\n\n  /**\n  * Runs all verifications before saving\n  * @param {function} callback Method to execute upon completion. Returns true if OK, false if failed\n  * @private\n  */\n  __verify__(callback) {\n\n    // Run through verifications in order they were added\n    async.series(\n      this._verificationsList.map(verification => {\n        return callback => {\n          verification.action.apply(\n            this,\n            verification.fields\n              .map(field => this.get(field))\n              .concat(bool => {\n                if (bool) {\n                  callback(null);\n                } else {\n                  if (verification.field) {\n                    this.setError(verification.field, verification.message);\n                    callback(null);\n                  } else {\n                    callback(new Error(verification.message))\n                  }\n                }\n              })\n          )\n        };\n      }),\n      (err) => {\n\n        if (this.hasErrors()) {\n          return callback.call(this, this.errorObject());\n        } else if (err) {\n          return callback.call(this, err);\n        }\n\n        callback(null);\n\n      }\n    );\n\n  }\n\n  /**\n  * Saves model to database\n  * @param {function} callback Method to execute upon completion, returns error if failed (including validations didn't pass)\n  * @private\n  */\n  __save__(callback) {\n\n    let db = this.db;\n\n    // Legacy --- FIXME: Deprecated. Can remove for 1.0\n    if (arguments.length === 2) {\n      db = arguments[0];\n      callback = arguments[1];\n    }\n\n    if(typeof callback !== 'function') {\n      callback = function() {};\n    }\n\n    if (this.fieldList().indexOf('updated_at') !== -1) {\n      this.set('updated_at', new Date());\n    }\n\n    let query = this.__generateSaveQuery__();\n\n    db.query(\n      query.sql,\n      query.params,\n      (err, result) => {\n\n        if (err) {\n          this.setError('_query', err.message);\n        } else {\n          result.rows.length && this.__load__(result.rows[0], true);\n        }\n\n        callback.call(this, this.errorObject());\n\n      }\n    );\n\n  }\n\n  /**\n  * Destroys model and cascades all deletes.\n  * @param {function} callback method to run upon completion\n  */\n  destroyCascade(callback) {\n\n    ModelArray.from([this]).destroyCascade(callback);\n\n  }\n\n  /**\n  * Logic to execute before a model gets destroyed. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  beforeDestroy(callback) {\n\n    callback(null, this);\n\n  }\n\n  /**\n  * Logic to execute after a model is destroyed. Intended to be overwritten when inherited.\n  * @param {Function} callback Invoke with first argument as an error if failure.\n  */\n  afterDestroy(callback) {\n\n    callback(null, this);\n\n  }\n\n  /**\n  * Destroys model reference in database.\n  * @param {function({Error} err, {Carthage.Model} model)} callback\n  *   Method to execute upon completion, returns error if failed\n  */\n  destroy(callback) {\n\n    callback = callback || (() => {});\n\n    async.series([\n      this.beforeDestroy,\n      this.__destroy__,\n      this.afterDestroy\n    ].map(f => f.bind(this)), (err) => {\n      callback(err || null, this);\n    });\n\n  }\n\n  /**\n  * Destroys model reference in database\n  * @param {function} callback Method to execute upon completion, returns error if failed\n  * @private\n  */\n  __destroy__(callback) {\n\n    let db = this.db;\n\n    // Legacy\n    if (arguments.length === 2) {\n      db = arguments[0];\n      callback = arguments[1];\n    }\n\n    let model = this;\n\n    if (!(db instanceof Database)) {\n      throw new Error('Must provide a valid Database to save to');\n    }\n\n    if (typeof callback !== 'function') {\n      callback = function() {};\n    }\n\n    if (!model.inStorage()) {\n\n      setTimeout(callback.bind(model, {'_query': 'Model has not been saved'}, model), 1);\n      return;\n\n    }\n\n    let columns = model.fieldList().filter(function(v) {\n      return model.isFieldPrimaryKey(v);\n    });\n\n    let query = db.adapter.generateDeleteQuery(model.schema.table, columns);\n\n    db.query(\n      query,\n      columns.map(function(v) {\n        return db.adapter.sanitize(model.getFieldData(v).type, model.get(v, true));\n      }),\n      function(err, result) {\n\n        if (err) {\n          model.setError('_query', err.message);\n        } else {\n          model._inStorage = false;\n        }\n\n        callback.call(model, err, model);\n\n      }\n    );\n\n  }\n\n}\n\nModel.prototype.schema = {\n  table: '',\n  columns: []\n};\n\nModel.prototype._validations = {};\nModel.prototype._validationsList = [];\n\nModel.prototype._calculations = {};\nModel.prototype._calculationsList = [];\n\nModel.prototype._verificationsList = [];\n\nModel.prototype._hides = {};\n\nModel.prototype.formatters = {};\n\nModel.prototype.data = null;\n\nModel.prototype.db = null;\n\nModel.prototype.externalInterface = [\n  'id',\n  'created_at',\n  'updated_at'\n];\n\nModel.prototype.aggregateBy = {\n  'id': 'count',\n  'created_at': 'min',\n  'updated_at': 'min'\n};\n\nmodule.exports = Model;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}