{"ast":null,"code":"module.exports = (() => {\n  'use strict';\n\n  const http = require('http');\n  const url = require('url');\n  const utilities = require('./utilities.js');\n\n  /**\n  * Single HTTP Application. Logging and response functionality.\n  * @class\n  */\n  class Application {\n    constructor(name) {\n      this.name = name || 'fxn';\n      this.server = http.createServer(this.handler.bind(this));\n      this.router = require(`${process.cwd()}/app/router.js`);\n      console.log(`[${this.name}.${process.pid}] Startup: Starting HTTP Worker`);\n      process.on('uncaughtException', e => {\n        process.send({\n          error: {\n            name: e.name,\n            message: e.message,\n            stack: e.stack\n          }\n        });\n        process.exit(1);\n      });\n      process.on('message', data => {\n        data.invalidate && process.exit(0);\n      });\n      process.on('exit', code => {\n        console.log(`[${this.name}.${process.pid}] Shutdown: Exited with code ${code}`);\n      });\n    }\n\n    /**\n    * Listens for incoming connections on a provided port\n    * @param {Number} port\n    */\n    listen(port) {\n      port = port || 3000;\n      this.server.listen(port);\n      console.log(`[${this.name}.${process.pid}] Ready: HTTP Worker listening on port ${port}`);\n      process.send({\n        message: 'ready'\n      });\n    }\n    getTime() {\n      let hrTime = process.hrtime();\n      return hrTime[0] * 1000 + hrTime[1] / 1000000;\n    }\n\n    /**\n    * Logs a server response in the console\n    * @param {Number} statusCode HTTP Status Code\n    * @param {String} url The url that was hit\n    * @param {String} t The time to execute the request\n    */\n    logResponse(statusCode, url, t, str) {\n      let num = Math.floor(statusCode / 100);\n      str = str || '';\n      if (num === 2) {\n        str = str || 'Request OK';\n      } else if (num === 3) {\n        str = str || 'Request Redirect';\n      } else if (num === 4) {\n        str = str || 'Request Error';\n      } else if (num === 5) {\n        str = str || 'Server Error';\n      } else {\n        str = str || 'Unknown';\n      }\n      console.log(`[${this.name}.${process.pid}] ${str} [${statusCode | 0}]: ${url} loaded in ${t} ms`);\n    }\n\n    /**\n    * HTTP Request Handler\n    * @param {http.ClientRequest} req\n    * @param {http.ServerResponse} res\n    */\n    handler(req, res) {\n      let body = [];\n      let bodyLength = 0;\n      let maxSize = utilities.parseSize(process.env.MAX_UPLOAD_SIZE) || utilities.parseSize('20MB');\n      let start = this.getTime();\n      console.log(`[${this.name}.${process.pid}] Incoming Request: ${req.url} from ${req.connection.remoteAddress}`);\n      let route = this.router.find(req.url);\n      if (!route) {\n        this.error(req, res, start, 404, 'Not Found');\n        return;\n      }\n      req.on('data', data => {\n        body.push(data);\n        bodyLength += data.length;\n        if (bodyLength > maxSize) {\n          this.error(req, res, start, 413, 'Request Too Large');\n          req.connection.destroy();\n        }\n      });\n      req.on('end', () => {\n        if (req.connection.destroyed) {\n          return;\n        }\n        body = Buffer.concat(body);\n        return this.router.dispatch(this.router.prepare(req.connection.remoteAddress, req.url, req.method, req.headers, body), (err, status, headers, data) => {\n          if (err) {\n            this.error(req, res, start, 500, 'Internal Server Error', err);\n          } else {\n            this.send(req, res, start, status, headers, data);\n          }\n        });\n      });\n    }\n\n    /**\n    * HTTP Error\n    */\n    error(req, res, start, status, message, err) {\n      status = status || 500;\n      message = message || 'Internal Server Error';\n      let headers = {\n        'Content-Type': 'text/plain'\n      };\n      err && console.log(err.stack);\n      this.send(req, res, start, status, headers, message + (err ? `\\n${err.stack}` : ''), message);\n    }\n\n    /**\n    * Ends the HTTP Response\n    */\n    send(req, res, start, status, headers, data, log) {\n      res.writeHead(status, headers);\n      res.end(data);\n      this.logResponse(res.statusCode, req.url, (this.getTime() - start).toFixed(3), log);\n    }\n  }\n  return Application;\n})();","map":{"version":3,"names":["module","exports","http","require","url","utilities","Application","constructor","name","server","createServer","handler","bind","router","process","cwd","console","log","pid","on","e","send","error","message","stack","exit","data","invalidate","code","listen","port","getTime","hrTime","hrtime","logResponse","statusCode","t","str","num","Math","floor","req","res","body","bodyLength","maxSize","parseSize","env","MAX_UPLOAD_SIZE","start","connection","remoteAddress","route","find","push","length","destroy","destroyed","Buffer","concat","dispatch","prepare","method","headers","err","status","writeHead","end","toFixed"],"sources":["/Users/apps/node_modules/fxn/core/required/application.js"],"sourcesContent":["module.exports = (() => {\n\n  'use strict';\n\n  const http = require('http');\n  const url = require('url');\n  const utilities = require('./utilities.js');\n\n  /**\n  * Single HTTP Application. Logging and response functionality.\n  * @class\n  */\n  class Application {\n\n    constructor(name) {\n\n      this.name = name || 'fxn';\n\n      this.server = http.createServer(this.handler.bind(this));\n      this.router = require(`${process.cwd()}/app/router.js`);\n\n      console.log(`[${this.name}.${process.pid}] Startup: Starting HTTP Worker`);\n\n      process.on('uncaughtException', e => {\n        process.send({\n          error: {\n            name: e.name,\n            message: e.message,\n            stack: e.stack\n          }\n        });\n        process.exit(1);\n      });\n\n      process.on('message', data => {\n        data.invalidate && process.exit(0);\n      });\n\n      process.on('exit', (code) => {\n        console.log(`[${this.name}.${process.pid}] Shutdown: Exited with code ${code}`);\n      });\n\n    }\n\n    /**\n    * Listens for incoming connections on a provided port\n    * @param {Number} port\n    */\n    listen(port) {\n\n      port = port || 3000;\n\n      this.server.listen(port);\n      console.log(`[${this.name}.${process.pid}] Ready: HTTP Worker listening on port ${port}`);\n      process.send({message: 'ready'});\n\n    }\n\n    getTime() {\n\n      let hrTime = process.hrtime()\n      return (hrTime[0] * 1000 + hrTime[1] / 1000000);\n\n    }\n\n    /**\n    * Logs a server response in the console\n    * @param {Number} statusCode HTTP Status Code\n    * @param {String} url The url that was hit\n    * @param {String} t The time to execute the request\n    */\n    logResponse(statusCode, url, t, str) {\n\n      let num = Math.floor(statusCode / 100);\n      str = str || '';\n\n      if (num === 2) {\n        str = str || 'Request OK';\n      } else if (num === 3) {\n        str = str || 'Request Redirect';\n      } else if (num === 4) {\n        str = str || 'Request Error';\n      } else if (num === 5) {\n        str = str || 'Server Error';\n      } else {\n        str = str || 'Unknown';\n      }\n\n      console.log(`[${this.name}.${process.pid}] ${str} [${statusCode | 0}]: ${url} loaded in ${t} ms`);\n\n    }\n\n    /**\n    * HTTP Request Handler\n    * @param {http.ClientRequest} req\n    * @param {http.ServerResponse} res\n    */\n    handler(req, res) {\n\n      let body = [];\n      let bodyLength = 0;\n      let maxSize = utilities.parseSize(process.env.MAX_UPLOAD_SIZE) || utilities.parseSize('20MB');\n      let start = this.getTime();\n\n      console.log(`[${this.name}.${process.pid}] Incoming Request: ${req.url} from ${req.connection.remoteAddress}`);\n\n      let route = this.router.find(req.url);\n\n      if (!route) {\n        this.error(req, res, start, 404, 'Not Found');\n        return;\n      }\n\n      req.on('data', data => {\n        body.push(data);\n        bodyLength += data.length;\n        if (bodyLength > maxSize) {\n          this.error(req, res, start, 413, 'Request Too Large');\n          req.connection.destroy();\n        }\n      });\n\n      req.on('end', () => {\n\n        if (req.connection.destroyed) {\n          return;\n        }\n\n        body = Buffer.concat(body);\n\n        return this.router.dispatch(\n          this.router.prepare(\n            req.connection.remoteAddress,\n            req.url,\n            req.method,\n            req.headers,\n            body\n          ),\n          (err, status, headers, data) => {\n\n            if (err) {\n              this.error(req, res, start, 500, 'Internal Server Error', err);\n            } else {\n              this.send(req, res, start, status, headers, data);\n            }\n\n          }\n        );\n\n      });\n\n    }\n\n    /**\n    * HTTP Error\n    */\n    error(req, res, start, status, message, err) {\n\n      status = status || 500;\n      message = message || 'Internal Server Error';\n\n      let headers = {'Content-Type': 'text/plain'};\n\n      err && console.log(err.stack);\n\n      this.send(req, res, start, status, headers, message + (err ? `\\n${err.stack}` : ''), message);\n\n    }\n\n    /**\n    * Ends the HTTP Response\n    */\n    send(req, res, start, status, headers, data, log) {\n\n      res.writeHead(status, headers);\n      res.end(data);\n\n      this.logResponse(res.statusCode, req.url, (this.getTime() - start).toFixed(3), log);\n\n    }\n\n  }\n\n  return Application;\n\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}