{"ast":null,"code":"// Some utility functions in js\n\nvar u = module.exports = {\n  array: {\n    // Returns a copy of the array with the value removed once\n    //\n    //     [1, 2, 3, 1].del 1 #=> [2, 3, 1]\n    //     [1, 2, 3].del 4    #=> [1, 2, 3]\n    del: function (arr, val) {\n      var index = arr.indexOf(val);\n      if (index != -1) {\n        if (index == 0) {\n          return arr.slice(1);\n        } else {\n          return arr.slice(0, index).concat(arr.slice(index + 1));\n        }\n      } else {\n        return arr;\n      }\n    },\n    // Returns the first element of the array\n    //\n    //     [1, 2, 3].first() #=> 1\n    first: function (arr) {\n      return arr[0];\n    },\n    // Returns the last element of the array\n    //\n    //     [1, 2, 3].last()  #=> 3\n    last: function (arr) {\n      return arr[arr.length - 1];\n    }\n  },\n  string: {\n    // Returns a copy of str with all occurrences of pattern replaced with either replacement or the return value of a function.\n    // The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted\n    // (that is /\\d/ will match a digit, but ‘\\d’ will match a backslash followed by a ‘d’).\n    //\n    // In the function form, the current match object is passed in as a parameter to the function, and variables such as\n    // $[1], $[2], $[3] (where $ is the match object) will be set appropriately. The value returned by the function will be\n    // substituted for the match on each call.\n    //\n    // The result inherits any tainting in the original string or any supplied replacement string.\n    //\n    //     \"hello\".gsub /[aeiou]/, '*'      #=> \"h*ll*\"\n    //     \"hello\".gsub /[aeiou]/, '<$1>'   #=> \"h<e>ll<o>\"\n    //     \"hello\".gsub /[aeiou]/, ($) {\n    //       \"<#{$[1]}>\"                    #=> \"h<e>ll<o>\"\n    //\n    gsub: function (str, pattern, replacement) {\n      var i, match, matchCmpr, matchCmprPrev, replacementStr, result, self;\n      if (!(pattern != null && replacement != null)) return u.string.value(str);\n      result = '';\n      self = str;\n      while (self.length > 0) {\n        if (match = self.match(pattern)) {\n          result += self.slice(0, match.index);\n          if (typeof replacement === 'function') {\n            match[1] = match[1] || match[0];\n            result += replacement(match);\n          } else if (replacement.match(/\\$[1-9]/)) {\n            matchCmprPrev = match;\n            matchCmpr = u.array.del(match, void 0);\n            while (matchCmpr !== matchCmprPrev) {\n              matchCmprPrev = matchCmpr;\n              matchCmpr = u.array.del(matchCmpr, void 0);\n            }\n            match[1] = match[1] || match[0];\n            replacementStr = replacement;\n            for (i = 1; i <= 9; i++) {\n              if (matchCmpr[i]) {\n                replacementStr = u.string.gsub(replacementStr, new RegExp('\\\\$' + i), matchCmpr[i]);\n              }\n            }\n            result += replacementStr;\n          } else {\n            result += replacement;\n          }\n          self = self.slice(match.index + match[0].length);\n        } else {\n          result += self;\n          self = '';\n        }\n      }\n      return result;\n    },\n    // Returns a copy of the String with the first letter being upper case\n    //\n    //     \"hello\".upcase #=> \"Hello\"\n    upcase: function (str) {\n      var self = u.string.gsub(str, /_([a-z])/, function ($) {\n        return '_' + $[1].toUpperCase();\n      });\n      self = u.string.gsub(self, /\\/([a-z])/, function ($) {\n        return '/' + $[1].toUpperCase();\n      });\n      return self[0].toUpperCase() + self.substr(1);\n    },\n    // Returns a copy of capitalized string\n    //\n    //     \"employee salary\" #=> \"Employee Salary\"\n    capitalize: function (str, spaces) {\n      if (!str.length) {\n        return str;\n      }\n      var self = str.toLowerCase();\n      if (!spaces) {\n        self = u.string.gsub(self, /\\s([a-z])/, function ($) {\n          return ' ' + $[1].toUpperCase();\n        });\n      }\n      return self[0].toUpperCase() + self.substr(1);\n    },\n    // Returns a copy of the String with the first letter being lower case\n    //\n    //     \"HELLO\".downcase #=> \"hELLO\"\n    downcase: function (str) {\n      var self = u.string.gsub(str, /_([A-Z])/, function ($) {\n        return '_' + $[1].toLowerCase();\n      });\n      self = u.string.gsub(self, /\\/([A-Z])/, function ($) {\n        return '/' + $[1].toLowerCase();\n      });\n      return self[0].toLowerCase() + self.substr(1);\n    },\n    // Returns a string value for the String object\n    //\n    //     \"hello\".value() #=> \"hello\"\n    value: function (str) {\n      return str.substr(0);\n    }\n  }\n};","map":{"version":3,"names":["u","module","exports","array","del","arr","val","index","indexOf","slice","concat","first","last","length","string","gsub","str","pattern","replacement","i","match","matchCmpr","matchCmprPrev","replacementStr","result","self","value","RegExp","upcase","$","toUpperCase","substr","capitalize","spaces","toLowerCase","downcase"],"sources":["/Users/apps/node_modules/i/lib/util.js"],"sourcesContent":["// Some utility functions in js\n\nvar u = (module.exports = {\n  array: {\n    // Returns a copy of the array with the value removed once\n    //\n    //     [1, 2, 3, 1].del 1 #=> [2, 3, 1]\n    //     [1, 2, 3].del 4    #=> [1, 2, 3]\n    del: function (arr, val) {\n      var index = arr.indexOf(val);\n\n      if (index != -1) {\n        if (index == 0) {\n          return arr.slice(1);\n        } else {\n          return arr.slice(0, index).concat(arr.slice(index + 1));\n        }\n      } else {\n        return arr;\n      }\n    },\n\n    // Returns the first element of the array\n    //\n    //     [1, 2, 3].first() #=> 1\n    first: function (arr) {\n      return arr[0];\n    },\n\n    // Returns the last element of the array\n    //\n    //     [1, 2, 3].last()  #=> 3\n    last: function (arr) {\n      return arr[arr.length - 1];\n    },\n  },\n  string: {\n    // Returns a copy of str with all occurrences of pattern replaced with either replacement or the return value of a function.\n    // The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted\n    // (that is /\\d/ will match a digit, but ‘\\d’ will match a backslash followed by a ‘d’).\n    //\n    // In the function form, the current match object is passed in as a parameter to the function, and variables such as\n    // $[1], $[2], $[3] (where $ is the match object) will be set appropriately. The value returned by the function will be\n    // substituted for the match on each call.\n    //\n    // The result inherits any tainting in the original string or any supplied replacement string.\n    //\n    //     \"hello\".gsub /[aeiou]/, '*'      #=> \"h*ll*\"\n    //     \"hello\".gsub /[aeiou]/, '<$1>'   #=> \"h<e>ll<o>\"\n    //     \"hello\".gsub /[aeiou]/, ($) {\n    //       \"<#{$[1]}>\"                    #=> \"h<e>ll<o>\"\n    //\n    gsub: function (str, pattern, replacement) {\n      var i, match, matchCmpr, matchCmprPrev, replacementStr, result, self;\n      if (!(pattern != null && replacement != null)) return u.string.value(str);\n      result = '';\n      self = str;\n      while (self.length > 0) {\n        if ((match = self.match(pattern))) {\n          result += self.slice(0, match.index);\n          if (typeof replacement === 'function') {\n            match[1] = match[1] || match[0];\n            result += replacement(match);\n          } else if (replacement.match(/\\$[1-9]/)) {\n            matchCmprPrev = match;\n            matchCmpr = u.array.del(match, void 0);\n            while (matchCmpr !== matchCmprPrev) {\n              matchCmprPrev = matchCmpr;\n              matchCmpr = u.array.del(matchCmpr, void 0);\n            }\n            match[1] = match[1] || match[0];\n            replacementStr = replacement;\n            for (i = 1; i <= 9; i++) {\n              if (matchCmpr[i]) {\n                replacementStr = u.string.gsub(replacementStr, new RegExp('\\\\$' + i), matchCmpr[i]);\n              }\n            }\n            result += replacementStr;\n          } else {\n            result += replacement;\n          }\n          self = self.slice(match.index + match[0].length);\n        } else {\n          result += self;\n          self = '';\n        }\n      }\n      return result;\n    },\n\n    // Returns a copy of the String with the first letter being upper case\n    //\n    //     \"hello\".upcase #=> \"Hello\"\n    upcase: function (str) {\n      var self = u.string.gsub(str, /_([a-z])/, function ($) {\n        return '_' + $[1].toUpperCase();\n      });\n\n      self = u.string.gsub(self, /\\/([a-z])/, function ($) {\n        return '/' + $[1].toUpperCase();\n      });\n\n      return self[0].toUpperCase() + self.substr(1);\n    },\n\n    // Returns a copy of capitalized string\n    //\n    //     \"employee salary\" #=> \"Employee Salary\"\n    capitalize: function (str, spaces) {\n      if (!str.length) {\n        return str;\n      }\n\n      var self = str.toLowerCase();\n\n      if (!spaces) {\n        self = u.string.gsub(self, /\\s([a-z])/, function ($) {\n          return ' ' + $[1].toUpperCase();\n        });\n      }\n\n      return self[0].toUpperCase() + self.substr(1);\n    },\n\n    // Returns a copy of the String with the first letter being lower case\n    //\n    //     \"HELLO\".downcase #=> \"hELLO\"\n    downcase: function (str) {\n      var self = u.string.gsub(str, /_([A-Z])/, function ($) {\n        return '_' + $[1].toLowerCase();\n      });\n\n      self = u.string.gsub(self, /\\/([A-Z])/, function ($) {\n        return '/' + $[1].toLowerCase();\n      });\n\n      return self[0].toLowerCase() + self.substr(1);\n    },\n\n    // Returns a string value for the String object\n    //\n    //     \"hello\".value() #=> \"hello\"\n    value: function (str) {\n      return str.substr(0);\n    },\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}