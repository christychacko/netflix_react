{"ast":null,"code":"module.exports = (() => {\n  'use strict';\n\n  const cluster = require('cluster');\n  const os = require('os');\n  const http = require('http');\n  const fs = require('fs');\n\n  /**\n  * Multi-process HTTP Daemon that resets when files changed (in development)\n  * @class\n  */\n  class Daemon {\n    constructor(name, cpus) {\n      this.name = name || 'fxn';\n      this._watchers = null;\n      this._error = null;\n      this._server = null;\n      this._port = null;\n      this.cpus = parseInt(cpus) || os.cpus().length;\n      this.children = [];\n      process.on('exit', code => {\n        console.log(`[${this.name}.Daemon] Shutdown: Exited with code ${code}`);\n      });\n    }\n\n    /**\n    * Starts the Daemon. If all application services fail, will launch a\n    *   dummy error app on the port provided.\n    * @param {Number} port\n    */\n    start(port) {\n      this._port = port || 3000;\n      console.log(`[${this.name}.Daemon] Startup: Initializing`);\n      if ((process.env.NODE_ENV || 'development') === 'development') {\n        this.watch('', changes => {\n          changes.forEach(change => {\n            console.log(`[${this.name}.Daemon] ${change.event[0].toUpperCase()}${change.event.substr(1)}: ${change.path}`);\n          });\n          this.children.forEach(child => child.send({\n            invalidate: true\n          }));\n          this.children = [];\n          !this.children.length && this.unwatch() && this.start();\n        });\n      }\n      this._server && this._server.close();\n      this._server = null;\n      for (var i = 0; i < this.cpus; i++) {\n        let child = cluster.fork();\n        this.children.push(child);\n        child.on('message', this.message.bind(this));\n        child.on('exit', this.exit.bind(this, child));\n      }\n      console.log(`[${this.name}.Daemon] Startup: Spawning HTTP Workers`);\n    }\n\n    /**\n    * Daemon failed to load, set it in idle state (accept connections, give dummy response)\n    */\n    idle() {\n      let port = this._port || 3000;\n      this._server = http.createServer((req, res) => {\n        this.error(req, res, this._error);\n        req.connection.destroy();\n      }).listen(port);\n      console.log(`[${this.name}.Daemon] Idle: Unable to spawn HTTP Workers, listening on port ${port}`);\n    }\n    error(req, res, error) {\n      res.writeHead(500, {\n        'Content-Type': 'text/plain'\n      });\n      res.end(`Application Error:\\n${error.stack}`);\n    }\n    message(data) {\n      data.error && this.logError(data.error);\n    }\n\n    /**\n    * Shut down a child process given a specific exit code. (Reboot if clean shutdown.)\n    * @param {child_process} child\n    * @param {Number} code Exit status codes\n    */\n    exit(child, code) {\n      let index = this.children.indexOf(child);\n      if (index === -1) {\n        return;\n      }\n      this.children.splice(index, 1);\n      if (code === 0) {\n        child = cluster.fork();\n        this.children.push(child);\n        child.on('message', this.message.bind(this));\n        child.on('exit', this.exit.bind(this, child));\n      }\n      if (this.children.length === 0) {\n        this.idle();\n      }\n    }\n\n    /**\n    * Log an error on the Daemon\n    * @param {Error} error\n    */\n    logError(error) {\n      this._error = error;\n      this._server = null;\n      console.log(`[${this.name}.Daemon] ${error.name}: ${error.message}`);\n      console.log(error.stack);\n    }\n\n    /**\n    * Stops watching a directory tree for changes\n    */\n    unwatch() {\n      clearInterval(this._watchers.interval);\n      this._watchers = null;\n      return true;\n    }\n\n    /**\n    * Watches a directory tree for changes\n    * @param {string} path Directory tree to watch\n    * @param {function} onChange Method to be executed when a change is detected\n    */\n    watch(path, onChange) {\n      function watchDir(cwd, dirname, watchers) {\n        if (!watchers) {\n          watchers = Object.create(null);\n          watchers.directories = Object.create(null);\n          watchers.interval = null;\n        }\n        let path = [cwd, dirname].join('');\n        let files = fs.readdirSync(path);\n        watchers.directories[path] = Object.create(null);\n        files.forEach(function (v) {\n          if (v === 'node_modules' || v.indexOf('.') === 0) {\n            return;\n          }\n          let filename = [dirname, v].join('/');\n          let fullPath = [cwd, filename].join('/');\n          let stat = fs.statSync(fullPath);\n          if (stat.isDirectory()) {\n            watchDir(cwd, filename, watchers);\n            return;\n          }\n          watchers.directories[path][v] = stat;\n        });\n        return watchers;\n      }\n      let watchers = watchDir(process.cwd(), path || '');\n      let self = this;\n      watchers.iterate = function (changes) {\n        if (changes.length) {\n          onChange.call(self, changes);\n        }\n      };\n      watchers.interval = setInterval(function () {\n        let changes = [];\n        Object.keys(watchers.directories).forEach(function (dirPath) {\n          let dir = watchers.directories[dirPath];\n          let files = fs.readdirSync(dirPath);\n          let added = [];\n          let contents = Object.create(null);\n          files.forEach(function (v) {\n            if (v === 'node_modules' || v.indexOf('.') === 0) {\n              return;\n            }\n            let fullPath = [dirPath, v].join('/');\n            let stat = fs.statSync(fullPath);\n            if (stat.isDirectory()) {\n              return;\n            }\n            if (!dir[v]) {\n              added.push([v, stat]);\n              changes.push({\n                event: 'added',\n                path: fullPath\n              });\n              return;\n            }\n            if (stat.mtime.toString() !== dir[v].mtime.toString()) {\n              dir[v] = stat;\n              changes.push({\n                event: 'modified',\n                path: fullPath\n              });\n            }\n            contents[v] = true;\n          });\n          Object.keys(dir).forEach(function (v) {\n            let fullPath = [dirPath, v].join('/');\n            if (!contents[v]) {\n              delete dir[v];\n              changes.push({\n                event: 'removed',\n                path: fullPath\n              });\n            }\n          });\n          added.forEach(function (v) {\n            dir[v[0]] = v[1];\n          });\n        });\n        watchers.iterate(changes);\n      }, 1000);\n      return this._watchers = watchers;\n    }\n  }\n  return Daemon;\n})();","map":{"version":3,"names":["module","exports","cluster","require","os","http","fs","Daemon","constructor","name","cpus","_watchers","_error","_server","_port","parseInt","length","children","process","on","code","console","log","start","port","env","NODE_ENV","watch","changes","forEach","change","event","toUpperCase","substr","path","child","send","invalidate","unwatch","close","i","fork","push","message","bind","exit","idle","createServer","req","res","error","connection","destroy","listen","writeHead","end","stack","data","logError","index","indexOf","splice","clearInterval","interval","onChange","watchDir","cwd","dirname","watchers","Object","create","directories","join","files","readdirSync","v","filename","fullPath","stat","statSync","isDirectory","self","iterate","call","setInterval","keys","dirPath","dir","added","contents","mtime","toString"],"sources":["/Users/apps/node_modules/fxn/core/required/daemon.js"],"sourcesContent":["module.exports = (() => {\n\n  'use strict';\n\n  const cluster = require('cluster');\n  const os = require('os');\n  const http = require('http');\n  const fs = require('fs');\n\n  /**\n  * Multi-process HTTP Daemon that resets when files changed (in development)\n  * @class\n  */\n  class Daemon {\n\n    constructor(name, cpus) {\n\n      this.name = name || 'fxn';\n\n      this._watchers = null;\n\n      this._error = null;\n      this._server = null;\n      this._port = null;\n\n      this.cpus = parseInt(cpus) || os.cpus().length;\n      this.children = [];\n\n      process.on('exit', (code) => {\n\n        console.log(`[${this.name}.Daemon] Shutdown: Exited with code ${code}`);\n\n      });\n\n    }\n\n    /**\n    * Starts the Daemon. If all application services fail, will launch a\n    *   dummy error app on the port provided.\n    * @param {Number} port\n    */\n    start(port) {\n\n      this._port = port || 3000;\n\n      console.log(`[${this.name}.Daemon] Startup: Initializing`);\n\n      if ((process.env.NODE_ENV || 'development') === 'development') {\n\n        this.watch('', (changes) => {\n\n          changes.forEach(change => {\n            console.log(`[${this.name}.Daemon] ${change.event[0].toUpperCase()}${change.event.substr(1)}: ${change.path}`);\n          });\n\n          this.children.forEach(child => child.send({invalidate: true}));\n          this.children = [];\n          !this.children.length && this.unwatch() && this.start();\n\n        });\n\n      }\n\n      this._server && this._server.close();\n      this._server = null;\n\n      for (var i = 0; i < this.cpus; i++) {\n\n        let child = cluster.fork();\n        this.children.push(child);\n\n        child.on('message', this.message.bind(this));\n        child.on('exit', this.exit.bind(this, child));\n\n      }\n\n      console.log(`[${this.name}.Daemon] Startup: Spawning HTTP Workers`);\n\n    }\n\n    /**\n    * Daemon failed to load, set it in idle state (accept connections, give dummy response)\n    */\n    idle() {\n\n      let port = this._port || 3000;\n\n      this._server = http\n        .createServer((req, res) => {\n          this.error(req, res, this._error);\n          req.connection.destroy();\n        })\n        .listen(port);\n\n      console.log(`[${this.name}.Daemon] Idle: Unable to spawn HTTP Workers, listening on port ${port}`);\n\n    }\n\n    error(req, res, error) {\n\n      res.writeHead(500, {'Content-Type': 'text/plain'});\n      res.end(`Application Error:\\n${error.stack}`);\n\n    }\n\n    message(data) {\n\n      data.error && this.logError(data.error);\n\n    }\n\n    /**\n    * Shut down a child process given a specific exit code. (Reboot if clean shutdown.)\n    * @param {child_process} child\n    * @param {Number} code Exit status codes\n    */\n    exit(child, code) {\n\n      let index = this.children.indexOf(child);\n\n      if (index === -1) {\n        return;\n      }\n\n      this.children.splice(index, 1);\n\n      if (code === 0) {\n        child = cluster.fork();\n        this.children.push(child);\n        child.on('message', this.message.bind(this));\n        child.on('exit', this.exit.bind(this, child));\n      }\n\n      if (this.children.length === 0) {\n        this.idle();\n      }\n\n    }\n\n    /**\n    * Log an error on the Daemon\n    * @param {Error} error\n    */\n    logError(error) {\n\n      this._error = error;\n      this._server = null;\n      console.log(`[${this.name}.Daemon] ${error.name}: ${error.message}`);\n      console.log(error.stack);\n\n    }\n\n    /**\n    * Stops watching a directory tree for changes\n    */\n    unwatch() {\n\n      clearInterval(this._watchers.interval);\n      this._watchers = null;\n      return true;\n\n    }\n\n    /**\n    * Watches a directory tree for changes\n    * @param {string} path Directory tree to watch\n    * @param {function} onChange Method to be executed when a change is detected\n    */\n    watch(path, onChange) {\n\n      function watchDir(cwd, dirname, watchers) {\n\n        if (!watchers) {\n\n          watchers = Object.create(null);\n          watchers.directories = Object.create(null);\n          watchers.interval = null;\n\n        }\n\n        let path = [cwd, dirname].join('');\n        let files = fs.readdirSync(path);\n\n        watchers.directories[path] = Object.create(null);\n\n        files.forEach(function(v) {\n\n          if (v === 'node_modules' || v.indexOf('.') === 0) {\n            return;\n          }\n\n          let filename = [dirname, v].join('/');\n          let fullPath = [cwd, filename].join('/');\n\n          let stat = fs.statSync(fullPath);\n\n          if (stat.isDirectory()) {\n            watchDir(cwd, filename, watchers);\n            return;\n          }\n\n          watchers.directories[path][v] = stat;\n\n        });\n\n        return watchers;\n\n      }\n\n      let watchers = watchDir(process.cwd(), path || '');\n      let self = this;\n\n      watchers.iterate = function(changes) {\n\n        if (changes.length) {\n          onChange.call(self, changes);\n        }\n\n      };\n\n      watchers.interval = setInterval(function() {\n\n        let changes = [];\n\n        Object.keys(watchers.directories).forEach(function(dirPath) {\n\n          let dir = watchers.directories[dirPath];\n          let files = fs.readdirSync(dirPath);\n          let added = [];\n\n          let contents = Object.create(null);\n\n          files.forEach(function(v) {\n\n            if (v === 'node_modules' || v.indexOf('.') === 0) {\n              return;\n            }\n\n            let fullPath = [dirPath, v].join('/');\n            let stat = fs.statSync(fullPath);\n\n            if (stat.isDirectory()) {\n              return;\n            }\n\n            if (!dir[v]) {\n              added.push([v, stat]);\n              changes.push({event: 'added', path: fullPath});\n              return;\n            }\n\n            if (stat.mtime.toString() !== dir[v].mtime.toString()) {\n              dir[v] = stat;\n              changes.push({event: 'modified', path: fullPath});\n            }\n\n            contents[v] = true;\n\n          });\n\n          Object.keys(dir).forEach(function(v) {\n\n            let fullPath = [dirPath, v].join('/');\n\n            if (!contents[v]) {\n              delete dir[v];\n              changes.push({event: 'removed', path: fullPath});\n            }\n\n          });\n\n          added.forEach(function(v) {\n            dir[v[0]] = v[1];\n          });\n\n        });\n\n        watchers.iterate(changes);\n\n      }, 1000);\n\n      return this._watchers = watchers;\n\n    }\n\n  }\n\n  return Daemon;\n\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}