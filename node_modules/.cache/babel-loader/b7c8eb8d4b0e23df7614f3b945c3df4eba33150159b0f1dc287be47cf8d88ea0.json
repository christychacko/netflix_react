{"ast":null,"code":"module.exports = (() => {\n  'use strict';\n\n  const url = require('url');\n  const querystring = require('querystring');\n  const domain = require('domain'); // TODO: Will be deprecated\n\n  const utilities = require('./utilities.js');\n  const StrongParam = require('./strong_param.js');\n  const ExecutionQueue = require('./execution_queue.js');\n  class Route {\n    constructor(path, regex, names) {\n      this.path = path;\n      this.regex = regex;\n      this.names = names;\n      this.controller = null;\n    }\n    match(path) {\n      let match = path.match(this.regex);\n      return match ? [].slice.call(match, 1) : null;\n    }\n    params(path) {\n      let matches = this.match(path).map(v => v || '');\n      return this.names.reduce((obj, name, i) => {\n        obj[name] = matches[i];\n        return obj;\n      }, {});\n    }\n    use(controller) {\n      this.controller = controller;\n      return this;\n    }\n  }\n  class Router {\n    constructor() {\n      this._routes = [];\n      this.middleware = new ExecutionQueue();\n      this.renderware = new ExecutionQueue();\n    }\n    parsePath(requrl) {\n      let urlData = url.parse(requrl, true);\n      let path = urlData.pathname;\n      if (path[path.length - 1] === '/') {\n        path = path.substr(path, path.length - 1);\n      }\n      return path;\n    }\n    route(path) {\n      let routeData = utilities.parseRegexFromString(path);\n      let route = new Route(path, routeData.regex, routeData.names);\n      this._routes.push(route);\n      return route;\n    }\n    find(url) {\n      let path = this.parsePath(url);\n      let routes = this._routes;\n      for (let i = 0, len = routes.length; i < len; i++) {\n        let route = routes[i];\n        if (route.match(path)) {\n          return route;\n        }\n      }\n      return null;\n    }\n    parseBody(body, headers) {\n      let contentType = headers['content-type'];\n      let contentData = (contentType || '').split(';').map(c => c.replace(/^\\s*(.*)\\s*$/, '$1'));\n      contentType = contentData[0] || '';\n      contentData = contentData.slice(1).reduce((data, content) => {\n        content = content.split('=');\n        content && (data[content[0]] = content[1]);\n        return data;\n      }, {});\n      let fn = {\n        'application/x-www-form-urlencoded': body => {\n          return this.parseQueryParameters(querystring.parse(body.toString()));\n        },\n        'application/json': body => {\n          try {\n            return JSON.parse(body.toString());\n          } catch (e) {\n            console.log('Failed to parse JSON Body');\n            return {};\n          }\n        },\n        'multipart/form-data': body => {\n          let data = {};\n          body = body.toString('binary');\n          let delim = contentData.boundary;\n          let newLine = body.indexOf(delim + '\\r\\n') > -1 ? '\\r\\n' : '\\n';\n          let items = body.split(delim);\n\n          // Eliminate top of array (empty).\n          items.shift();\n          return items.map(item => {\n            item = item.split(newLine);\n            item.shift();\n            item.pop();\n            return item;\n          }).filter(item => item.length).reduce((data, item) => {\n            let contentDisposition;\n            let contentType;\n            if (item[0].match(/^content\\-disposition/i)) {\n              contentDisposition = item.shift().replace(/^\\s*(.*)\\s*$/, '$1');\n            }\n            if (item[0].match(/^content\\-type/i)) {\n              contentType = item.shift().replace(/^\\s*(.*)\\s*$/, '$1');\n            }\n\n            // Remove blank line...\n            item.shift();\n            let content = item.join(newLine);\n            contentType = contentType && contentType.split(';')[0];\n            contentType = contentType && contentType.split(':')[1].replace(/^\\s*(.*)\\s*$/, '$1');\n            if (!contentDisposition) {\n              // Malformed body, so return nothing\n              return {};\n            }\n            let meta = contentDisposition.split(';').slice(1).reduce((meta, v) => {\n              v = v.replace(/^\\s*(.*)\\s*$/, '$1').split('=');\n              let name = v[0];\n              let value = '';\n              try {\n                value = JSON.parse(v[1]);\n              } catch (e) {\n                value = '';\n              }\n              meta[name] = value;\n              return meta;\n            }, {});\n            if (meta.name) {\n              if (!contentType) {\n                let buffer = new Buffer(content, 'binary');\n                data[meta.name] = buffer.toString();\n              } else {\n                let buffer = new Buffer(content, 'binary');\n                buffer.contentType = contentType;\n                Object.keys(meta).forEach(key => buffer[key] = meta[key]);\n                data[meta.name] = buffer;\n              }\n            }\n            return data;\n          }, {});\n        }\n      }[contentType];\n      return fn ? fn.call(this, body) : {};\n    }\n    parseQueryParameters(query) {\n      let obj = {};\n      Object.keys(query).forEach(function (key) {\n        let newKey, subKey;\n        let value = query[key];\n        let match = key.match(/(.*)\\[(.*)\\]$/);\n        if (match) {\n          newKey = match[1];\n          subKey = match[2];\n          if (subKey) {\n            obj[newKey] = obj[newKey] || {};\n            obj[newKey][subKey] = value;\n            return;\n          }\n          value = !(value instanceof Array) ? [value] : value;\n          obj[newKey] = value;\n          return;\n        }\n        obj[key] = value;\n        return;\n      });\n      return obj;\n    }\n    parseAuth(params, headers) {\n      let auth = {};\n      if (headers['authorization']) {\n        let parts = headers['authorization'].split(' ');\n        if (parts.length === 2 && /^Bearer$/i.test(parts[0])) {\n          auth.token_type = 'bearer';\n          auth.access_token = parts[1];\n        }\n      } else if (params.access_token) {\n        auth.token_type = 'bearer';\n        auth.access_token = params.access_token || '';\n      }\n      return auth;\n    }\n    prepare(ip, url, method, headers, body) {\n      let path = this.parsePath(url);\n      let route = this.find(url);\n      body = body instanceof Buffer ? body : new Buffer(body + '');\n      return {\n        remoteAddress: ip,\n        url: url,\n        method: method,\n        path: path,\n        controller: route.controller,\n        headers: headers,\n        matches: route.match(path),\n        route: route.params(path),\n        body: body\n      };\n    }\n    parseRemoteAddress(remoteAddress, list) {\n      let remoteAddressList = remoteAddress.split(',').map(v => v.replace(/^\\s*(.*?)\\s*$/, '$1')).filter(v => v);\n      return list ? remoteAddressList : remoteAddressList[0];\n    }\n    dispatch(routeData, responder) {\n      let params = {\n        buffer: new Buffer(routeData.body, 'binary'),\n        query: new StrongParam(this.parseQueryParameters(url.parse(routeData.url, true).query)),\n        body: new StrongParam(this.parseBody(routeData.body, routeData.headers)),\n        path: routeData.path,\n        auth: this.parseAuth(url.parse(routeData.url, true).query, routeData.headers),\n        matches: routeData.matches,\n        route: routeData.route,\n        remoteAddress: this.parseRemoteAddress(routeData.headers['x-forwarded-for'] || routeData.remoteAddress || ''),\n        remoteAddressList: this.parseRemoteAddress(routeData.headers['x-forwarded-for'] || routeData.remoteAddress || '', true),\n        id: routeData.route.id\n      };\n      let d = domain.create();\n      d.on('error', responder);\n      d.run(() => {\n        const DispatchController = routeData.controller;\n        let controller = new DispatchController(routeData.path, routeData.method, routeData.headers, params, responder);\n        controller.middleware.prepend(this.middleware);\n        controller.renderware.append(this.renderware);\n        controller.run();\n        return controller;\n      });\n    }\n  }\n  return Router;\n})();","map":{"version":3,"names":["module","exports","url","require","querystring","domain","utilities","StrongParam","ExecutionQueue","Route","constructor","path","regex","names","controller","match","slice","call","params","matches","map","v","reduce","obj","name","i","use","Router","_routes","middleware","renderware","parsePath","requrl","urlData","parse","pathname","length","substr","route","routeData","parseRegexFromString","push","find","routes","len","parseBody","body","headers","contentType","contentData","split","c","replace","data","content","fn","parseQueryParameters","toString","JSON","e","console","log","delim","boundary","newLine","indexOf","items","shift","item","pop","filter","contentDisposition","join","meta","value","buffer","Buffer","Object","keys","forEach","key","query","newKey","subKey","Array","parseAuth","auth","parts","test","token_type","access_token","prepare","ip","method","remoteAddress","parseRemoteAddress","list","remoteAddressList","dispatch","responder","id","d","create","on","run","DispatchController","prepend","append"],"sources":["/Users/apps/node_modules/fxn/core/required/router.js"],"sourcesContent":["module.exports = (() => {\n\n  'use strict';\n\n  const url = require('url');\n  const querystring = require('querystring');\n  const domain = require('domain'); // TODO: Will be deprecated\n\n  const utilities = require('./utilities.js');\n  const StrongParam = require('./strong_param.js');\n  const ExecutionQueue = require('./execution_queue.js');\n\n  class Route {\n\n    constructor(path, regex, names) {\n\n      this.path = path;\n      this.regex = regex;\n      this.names = names;\n      this.controller = null;\n\n    }\n\n    match(path) {\n\n      let match = path.match(this.regex);\n      return match ? [].slice.call(match, 1) : null;\n\n    }\n\n    params(path) {\n\n      let matches = this.match(path).map(v => v || '');\n      return this.names.reduce((obj, name, i) => {\n        obj[name] = matches[i];\n        return obj;\n      }, {});\n\n    }\n\n    use(controller) {\n\n      this.controller = controller;\n      return this;\n\n    }\n\n  }\n\n  class Router {\n\n    constructor() {\n\n      this._routes = [];\n      this.middleware = new ExecutionQueue();\n      this.renderware = new ExecutionQueue();\n\n    }\n\n    parsePath(requrl) {\n\n      let urlData = url.parse(requrl, true);\n      let path = urlData.pathname;\n      if (path[path.length - 1] === '/') {\n        path = path.substr(path, path.length - 1);\n      }\n\n      return path;\n\n    }\n\n    route(path) {\n\n      let routeData = utilities.parseRegexFromString(path);\n      let route = new Route(path, routeData.regex, routeData.names);\n      this._routes.push(route);\n      return route;\n\n    }\n\n    find(url) {\n\n      let path = this.parsePath(url);\n      let routes = this._routes;\n\n      for (let i = 0, len = routes.length; i < len; i++) {\n        let route = routes[i];\n        if (route.match(path)) {\n          return route;\n        }\n      }\n\n      return null;\n\n    }\n\n    parseBody(body, headers) {\n\n      let contentType = headers['content-type'];\n      let contentData = (contentType || '').split(';').map(c => c.replace(/^\\s*(.*)\\s*$/, '$1'));\n\n      contentType = contentData[0] || '';\n      contentData = contentData.slice(1).reduce((data, content) => {\n        content = content.split('=');\n        content && (data[content[0]] = content[1]);\n        return data;\n      }, {});\n\n      let fn = {\n        'application/x-www-form-urlencoded': (body) => {\n          return this.parseQueryParameters(querystring.parse(body.toString()));\n        },\n        'application/json': body => {\n          try {\n            return JSON.parse(body.toString());\n          } catch(e) {\n            console.log('Failed to parse JSON Body');\n            return {};\n          }\n        },\n        'multipart/form-data': body => {\n\n          let data = {};\n          body = body.toString('binary');\n\n          let delim = contentData.boundary;\n          let newLine = body.indexOf(delim + '\\r\\n') > -1 ? '\\r\\n' : '\\n';\n\n          let items = body.split(delim);\n\n          // Eliminate top of array (empty).\n          items.shift();\n\n          return items\n            .map(item => {\n              item = item.split(newLine);\n              item.shift();\n              item.pop();\n              return item;\n            })\n            .filter(item => item.length)\n            .reduce((data, item) => {\n\n              let contentDisposition;\n              let contentType;\n\n              if (item[0].match(/^content\\-disposition/i)) {\n                contentDisposition = item.shift().replace(/^\\s*(.*)\\s*$/, '$1');\n              }\n\n              if (item[0].match(/^content\\-type/i)) {\n                contentType = item.shift().replace(/^\\s*(.*)\\s*$/, '$1');\n              }\n\n              // Remove blank line...\n              item.shift();\n\n              let content = item.join(newLine);\n\n              contentType = contentType && contentType.split(';')[0];\n              contentType = contentType && contentType.split(':')[1].replace(/^\\s*(.*)\\s*$/, '$1');\n\n              if (!contentDisposition) {\n                // Malformed body, so return nothing\n                return {};\n              }\n\n              let meta = contentDisposition.split(';')\n                .slice(1)\n                .reduce((meta, v) => {\n\n                  v = v.replace(/^\\s*(.*)\\s*$/, '$1').split('=');\n                  let name = v[0];\n                  let value = '';\n                  try {\n                    value = JSON.parse(v[1]);\n                  } catch(e) {\n                    value = '';\n                  }\n\n                  meta[name] = value;\n                  return meta;\n\n                }, {});\n\n              if (meta.name) {\n                if (!contentType) {\n                  let buffer = new Buffer(content, 'binary');\n                  data[meta.name] = buffer.toString();\n                } else {\n                  let buffer = new Buffer(content, 'binary');\n                  buffer.contentType = contentType;\n                  Object.keys(meta).forEach(key => buffer[key] = meta[key]);\n                  data[meta.name] = buffer;\n                }\n              }\n\n              return data;\n\n            }, {});\n\n        }\n      }[contentType];\n\n      return fn ? fn.call(this, body) : {};\n\n    }\n\n    parseQueryParameters(query) {\n\n      let obj = {};\n\n      Object.keys(query).forEach(function(key) {\n\n        let newKey, subKey;\n        let value = query[key];\n        let match = key.match(/(.*)\\[(.*)\\]$/);\n\n        if (match) {\n\n          newKey = match[1];\n          subKey = match[2];\n\n          if (subKey) {\n            obj[newKey] = obj[newKey] || {};\n            obj[newKey][subKey] = value;\n            return;\n          }\n\n          value = !(value instanceof Array) ? [value] : value;\n\n          obj[newKey] = value;\n          return;\n\n        }\n\n        obj[key] = value;\n        return;\n\n      });\n\n      return obj;\n\n    }\n\n    parseAuth(params, headers) {\n\n      let auth = {};\n\n      if (headers['authorization']) {\n        let parts = headers['authorization'].split(' ');\n        if (parts.length === 2 && /^Bearer$/i.test(parts[0])) {\n            auth.token_type = 'bearer';\n            auth.access_token = parts[1];\n        }\n      } else if (params.access_token) {\n        auth.token_type = 'bearer';\n        auth.access_token = params.access_token || '';\n      }\n\n      return auth;\n    }\n\n    prepare(ip, url, method, headers, body) {\n\n      let path = this.parsePath(url);\n      let route = this.find(url);\n      body = body instanceof Buffer ? body : new Buffer(body + '');\n\n      return {\n        remoteAddress: ip,\n        url: url,\n        method: method,\n        path: path,\n        controller: route.controller,\n        headers: headers,\n        matches: route.match(path),\n        route: route.params(path),\n        body: body\n      };\n\n    }\n\n    parseRemoteAddress(remoteAddress, list) {\n\n      let remoteAddressList = remoteAddress.split(',').map(v => v.replace(/^\\s*(.*?)\\s*$/, '$1')).filter(v => v);\n      return list ? remoteAddressList : remoteAddressList[0];\n\n    }\n\n    dispatch(routeData, responder) {\n\n      let params = {\n        buffer: new Buffer(routeData.body, 'binary'),\n        query: new StrongParam(this.parseQueryParameters(url.parse(routeData.url, true).query)),\n        body: new StrongParam(this.parseBody(routeData.body, routeData.headers)),\n        path: routeData.path,\n        auth: this.parseAuth(url.parse(routeData.url, true).query, routeData.headers),\n        matches: routeData.matches,\n        route: routeData.route,\n        remoteAddress: this.parseRemoteAddress(routeData.headers['x-forwarded-for'] || routeData.remoteAddress || ''),\n        remoteAddressList: this.parseRemoteAddress(routeData.headers['x-forwarded-for'] || routeData.remoteAddress || '', true),\n        id: routeData.route.id\n      };\n\n      let d = domain.create();\n\n      d.on('error', responder);\n\n      d.run(() => {\n\n        const DispatchController = routeData.controller;\n\n        let controller = new DispatchController(\n          routeData.path,\n          routeData.method,\n          routeData.headers,\n          params,\n          responder\n        );\n\n        controller.middleware.prepend(this.middleware);\n        controller.renderware.append(this.renderware);\n\n        controller.run();\n\n        return controller;\n\n      });\n\n    }\n\n  }\n\n  return Router;\n\n})();\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,CAAC,MAAM;EAEtB,YAAY;;EAEZ,MAAMC,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;EAC1B,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;EAC1C,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;EAElC,MAAMG,SAAS,GAAGH,OAAO,CAAC,gBAAgB,CAAC;EAC3C,MAAMI,WAAW,GAAGJ,OAAO,CAAC,mBAAmB,CAAC;EAChD,MAAMK,cAAc,GAAGL,OAAO,CAAC,sBAAsB,CAAC;EAEtD,MAAMM,KAAK,CAAC;IAEVC,WAAWA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAE;MAE9B,IAAI,CAACF,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACC,UAAU,GAAG,IAAI;IAExB;IAEAC,KAAKA,CAACJ,IAAI,EAAE;MAEV,IAAII,KAAK,GAAGJ,IAAI,CAACI,KAAK,CAAC,IAAI,CAACH,KAAK,CAAC;MAClC,OAAOG,KAAK,GAAG,EAAE,CAACC,KAAK,CAACC,IAAI,CAACF,KAAK,EAAE,CAAC,CAAC,GAAG,IAAI;IAE/C;IAEAG,MAAMA,CAACP,IAAI,EAAE;MAEX,IAAIQ,OAAO,GAAG,IAAI,CAACJ,KAAK,CAACJ,IAAI,CAAC,CAACS,GAAG,CAACC,CAAC,IAAIA,CAAC,IAAI,EAAE,CAAC;MAChD,OAAO,IAAI,CAACR,KAAK,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,CAAC,KAAK;QACzCF,GAAG,CAACC,IAAI,CAAC,GAAGL,OAAO,CAACM,CAAC,CAAC;QACtB,OAAOF,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAER;IAEAG,GAAGA,CAACZ,UAAU,EAAE;MAEd,IAAI,CAACA,UAAU,GAAGA,UAAU;MAC5B,OAAO,IAAI;IAEb;EAEF;EAEA,MAAMa,MAAM,CAAC;IAEXjB,WAAWA,CAAA,EAAG;MAEZ,IAAI,CAACkB,OAAO,GAAG,EAAE;MACjB,IAAI,CAACC,UAAU,GAAG,IAAIrB,cAAc,CAAC,CAAC;MACtC,IAAI,CAACsB,UAAU,GAAG,IAAItB,cAAc,CAAC,CAAC;IAExC;IAEAuB,SAASA,CAACC,MAAM,EAAE;MAEhB,IAAIC,OAAO,GAAG/B,GAAG,CAACgC,KAAK,CAACF,MAAM,EAAE,IAAI,CAAC;MACrC,IAAIrB,IAAI,GAAGsB,OAAO,CAACE,QAAQ;MAC3B,IAAIxB,IAAI,CAACA,IAAI,CAACyB,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACjCzB,IAAI,GAAGA,IAAI,CAAC0B,MAAM,CAAC1B,IAAI,EAAEA,IAAI,CAACyB,MAAM,GAAG,CAAC,CAAC;MAC3C;MAEA,OAAOzB,IAAI;IAEb;IAEA2B,KAAKA,CAAC3B,IAAI,EAAE;MAEV,IAAI4B,SAAS,GAAGjC,SAAS,CAACkC,oBAAoB,CAAC7B,IAAI,CAAC;MACpD,IAAI2B,KAAK,GAAG,IAAI7B,KAAK,CAACE,IAAI,EAAE4B,SAAS,CAAC3B,KAAK,EAAE2B,SAAS,CAAC1B,KAAK,CAAC;MAC7D,IAAI,CAACe,OAAO,CAACa,IAAI,CAACH,KAAK,CAAC;MACxB,OAAOA,KAAK;IAEd;IAEAI,IAAIA,CAACxC,GAAG,EAAE;MAER,IAAIS,IAAI,GAAG,IAAI,CAACoB,SAAS,CAAC7B,GAAG,CAAC;MAC9B,IAAIyC,MAAM,GAAG,IAAI,CAACf,OAAO;MAEzB,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEmB,GAAG,GAAGD,MAAM,CAACP,MAAM,EAAEX,CAAC,GAAGmB,GAAG,EAAEnB,CAAC,EAAE,EAAE;QACjD,IAAIa,KAAK,GAAGK,MAAM,CAAClB,CAAC,CAAC;QACrB,IAAIa,KAAK,CAACvB,KAAK,CAACJ,IAAI,CAAC,EAAE;UACrB,OAAO2B,KAAK;QACd;MACF;MAEA,OAAO,IAAI;IAEb;IAEAO,SAASA,CAACC,IAAI,EAAEC,OAAO,EAAE;MAEvB,IAAIC,WAAW,GAAGD,OAAO,CAAC,cAAc,CAAC;MACzC,IAAIE,WAAW,GAAG,CAACD,WAAW,IAAI,EAAE,EAAEE,KAAK,CAAC,GAAG,CAAC,CAAC9B,GAAG,CAAC+B,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;MAE1FJ,WAAW,GAAGC,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE;MAClCA,WAAW,GAAGA,WAAW,CAACjC,KAAK,CAAC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC+B,IAAI,EAAEC,OAAO,KAAK;QAC3DA,OAAO,GAAGA,OAAO,CAACJ,KAAK,CAAC,GAAG,CAAC;QAC5BI,OAAO,KAAKD,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,CAAC;QAC1C,OAAOD,IAAI;MACb,CAAC,EAAE,CAAC,CAAC,CAAC;MAEN,IAAIE,EAAE,GAAG;QACP,mCAAmC,EAAGT,IAAI,IAAK;UAC7C,OAAO,IAAI,CAACU,oBAAoB,CAACpD,WAAW,CAAC8B,KAAK,CAACY,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC;QACD,kBAAkB,EAAEX,IAAI,IAAI;UAC1B,IAAI;YACF,OAAOY,IAAI,CAACxB,KAAK,CAACY,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC;UACpC,CAAC,CAAC,OAAME,CAAC,EAAE;YACTC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;YACxC,OAAO,CAAC,CAAC;UACX;QACF,CAAC;QACD,qBAAqB,EAAEf,IAAI,IAAI;UAE7B,IAAIO,IAAI,GAAG,CAAC,CAAC;UACbP,IAAI,GAAGA,IAAI,CAACW,QAAQ,CAAC,QAAQ,CAAC;UAE9B,IAAIK,KAAK,GAAGb,WAAW,CAACc,QAAQ;UAChC,IAAIC,OAAO,GAAGlB,IAAI,CAACmB,OAAO,CAACH,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI;UAE/D,IAAII,KAAK,GAAGpB,IAAI,CAACI,KAAK,CAACY,KAAK,CAAC;;UAE7B;UACAI,KAAK,CAACC,KAAK,CAAC,CAAC;UAEb,OAAOD,KAAK,CACT9C,GAAG,CAACgD,IAAI,IAAI;YACXA,IAAI,GAAGA,IAAI,CAAClB,KAAK,CAACc,OAAO,CAAC;YAC1BI,IAAI,CAACD,KAAK,CAAC,CAAC;YACZC,IAAI,CAACC,GAAG,CAAC,CAAC;YACV,OAAOD,IAAI;UACb,CAAC,CAAC,CACDE,MAAM,CAACF,IAAI,IAAIA,IAAI,CAAChC,MAAM,CAAC,CAC3Bd,MAAM,CAAC,CAAC+B,IAAI,EAAEe,IAAI,KAAK;YAEtB,IAAIG,kBAAkB;YACtB,IAAIvB,WAAW;YAEf,IAAIoB,IAAI,CAAC,CAAC,CAAC,CAACrD,KAAK,CAAC,wBAAwB,CAAC,EAAE;cAC3CwD,kBAAkB,GAAGH,IAAI,CAACD,KAAK,CAAC,CAAC,CAACf,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;YACjE;YAEA,IAAIgB,IAAI,CAAC,CAAC,CAAC,CAACrD,KAAK,CAAC,iBAAiB,CAAC,EAAE;cACpCiC,WAAW,GAAGoB,IAAI,CAACD,KAAK,CAAC,CAAC,CAACf,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;YAC1D;;YAEA;YACAgB,IAAI,CAACD,KAAK,CAAC,CAAC;YAEZ,IAAIb,OAAO,GAAGc,IAAI,CAACI,IAAI,CAACR,OAAO,CAAC;YAEhChB,WAAW,GAAGA,WAAW,IAAIA,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACtDF,WAAW,GAAGA,WAAW,IAAIA,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACE,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;YAEpF,IAAI,CAACmB,kBAAkB,EAAE;cACvB;cACA,OAAO,CAAC,CAAC;YACX;YAEA,IAAIE,IAAI,GAAGF,kBAAkB,CAACrB,KAAK,CAAC,GAAG,CAAC,CACrClC,KAAK,CAAC,CAAC,CAAC,CACRM,MAAM,CAAC,CAACmD,IAAI,EAAEpD,CAAC,KAAK;cAEnBA,CAAC,GAAGA,CAAC,CAAC+B,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC;cAC9C,IAAI1B,IAAI,GAAGH,CAAC,CAAC,CAAC,CAAC;cACf,IAAIqD,KAAK,GAAG,EAAE;cACd,IAAI;gBACFA,KAAK,GAAGhB,IAAI,CAACxB,KAAK,CAACb,CAAC,CAAC,CAAC,CAAC,CAAC;cAC1B,CAAC,CAAC,OAAMsC,CAAC,EAAE;gBACTe,KAAK,GAAG,EAAE;cACZ;cAEAD,IAAI,CAACjD,IAAI,CAAC,GAAGkD,KAAK;cAClB,OAAOD,IAAI;YAEb,CAAC,EAAE,CAAC,CAAC,CAAC;YAER,IAAIA,IAAI,CAACjD,IAAI,EAAE;cACb,IAAI,CAACwB,WAAW,EAAE;gBAChB,IAAI2B,MAAM,GAAG,IAAIC,MAAM,CAACtB,OAAO,EAAE,QAAQ,CAAC;gBAC1CD,IAAI,CAACoB,IAAI,CAACjD,IAAI,CAAC,GAAGmD,MAAM,CAAClB,QAAQ,CAAC,CAAC;cACrC,CAAC,MAAM;gBACL,IAAIkB,MAAM,GAAG,IAAIC,MAAM,CAACtB,OAAO,EAAE,QAAQ,CAAC;gBAC1CqB,MAAM,CAAC3B,WAAW,GAAGA,WAAW;gBAChC6B,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,OAAO,CAACC,GAAG,IAAIL,MAAM,CAACK,GAAG,CAAC,GAAGP,IAAI,CAACO,GAAG,CAAC,CAAC;gBACzD3B,IAAI,CAACoB,IAAI,CAACjD,IAAI,CAAC,GAAGmD,MAAM;cAC1B;YACF;YAEA,OAAOtB,IAAI;UAEb,CAAC,EAAE,CAAC,CAAC,CAAC;QAEV;MACF,CAAC,CAACL,WAAW,CAAC;MAEd,OAAOO,EAAE,GAAGA,EAAE,CAACtC,IAAI,CAAC,IAAI,EAAE6B,IAAI,CAAC,GAAG,CAAC,CAAC;IAEtC;IAEAU,oBAAoBA,CAACyB,KAAK,EAAE;MAE1B,IAAI1D,GAAG,GAAG,CAAC,CAAC;MAEZsD,MAAM,CAACC,IAAI,CAACG,KAAK,CAAC,CAACF,OAAO,CAAC,UAASC,GAAG,EAAE;QAEvC,IAAIE,MAAM,EAAEC,MAAM;QAClB,IAAIT,KAAK,GAAGO,KAAK,CAACD,GAAG,CAAC;QACtB,IAAIjE,KAAK,GAAGiE,GAAG,CAACjE,KAAK,CAAC,eAAe,CAAC;QAEtC,IAAIA,KAAK,EAAE;UAETmE,MAAM,GAAGnE,KAAK,CAAC,CAAC,CAAC;UACjBoE,MAAM,GAAGpE,KAAK,CAAC,CAAC,CAAC;UAEjB,IAAIoE,MAAM,EAAE;YACV5D,GAAG,CAAC2D,MAAM,CAAC,GAAG3D,GAAG,CAAC2D,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/B3D,GAAG,CAAC2D,MAAM,CAAC,CAACC,MAAM,CAAC,GAAGT,KAAK;YAC3B;UACF;UAEAA,KAAK,GAAG,EAAEA,KAAK,YAAYU,KAAK,CAAC,GAAG,CAACV,KAAK,CAAC,GAAGA,KAAK;UAEnDnD,GAAG,CAAC2D,MAAM,CAAC,GAAGR,KAAK;UACnB;QAEF;QAEAnD,GAAG,CAACyD,GAAG,CAAC,GAAGN,KAAK;QAChB;MAEF,CAAC,CAAC;MAEF,OAAOnD,GAAG;IAEZ;IAEA8D,SAASA,CAACnE,MAAM,EAAE6B,OAAO,EAAE;MAEzB,IAAIuC,IAAI,GAAG,CAAC,CAAC;MAEb,IAAIvC,OAAO,CAAC,eAAe,CAAC,EAAE;QAC5B,IAAIwC,KAAK,GAAGxC,OAAO,CAAC,eAAe,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC;QAC/C,IAAIqC,KAAK,CAACnD,MAAM,KAAK,CAAC,IAAI,WAAW,CAACoD,IAAI,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;UAClDD,IAAI,CAACG,UAAU,GAAG,QAAQ;UAC1BH,IAAI,CAACI,YAAY,GAAGH,KAAK,CAAC,CAAC,CAAC;QAChC;MACF,CAAC,MAAM,IAAIrE,MAAM,CAACwE,YAAY,EAAE;QAC9BJ,IAAI,CAACG,UAAU,GAAG,QAAQ;QAC1BH,IAAI,CAACI,YAAY,GAAGxE,MAAM,CAACwE,YAAY,IAAI,EAAE;MAC/C;MAEA,OAAOJ,IAAI;IACb;IAEAK,OAAOA,CAACC,EAAE,EAAE1F,GAAG,EAAE2F,MAAM,EAAE9C,OAAO,EAAED,IAAI,EAAE;MAEtC,IAAInC,IAAI,GAAG,IAAI,CAACoB,SAAS,CAAC7B,GAAG,CAAC;MAC9B,IAAIoC,KAAK,GAAG,IAAI,CAACI,IAAI,CAACxC,GAAG,CAAC;MAC1B4C,IAAI,GAAGA,IAAI,YAAY8B,MAAM,GAAG9B,IAAI,GAAG,IAAI8B,MAAM,CAAC9B,IAAI,GAAG,EAAE,CAAC;MAE5D,OAAO;QACLgD,aAAa,EAAEF,EAAE;QACjB1F,GAAG,EAAEA,GAAG;QACR2F,MAAM,EAAEA,MAAM;QACdlF,IAAI,EAAEA,IAAI;QACVG,UAAU,EAAEwB,KAAK,CAACxB,UAAU;QAC5BiC,OAAO,EAAEA,OAAO;QAChB5B,OAAO,EAAEmB,KAAK,CAACvB,KAAK,CAACJ,IAAI,CAAC;QAC1B2B,KAAK,EAAEA,KAAK,CAACpB,MAAM,CAACP,IAAI,CAAC;QACzBmC,IAAI,EAAEA;MACR,CAAC;IAEH;IAEAiD,kBAAkBA,CAACD,aAAa,EAAEE,IAAI,EAAE;MAEtC,IAAIC,iBAAiB,GAAGH,aAAa,CAAC5C,KAAK,CAAC,GAAG,CAAC,CAAC9B,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC+B,OAAO,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC,CAACkB,MAAM,CAACjD,CAAC,IAAIA,CAAC,CAAC;MAC1G,OAAO2E,IAAI,GAAGC,iBAAiB,GAAGA,iBAAiB,CAAC,CAAC,CAAC;IAExD;IAEAC,QAAQA,CAAC3D,SAAS,EAAE4D,SAAS,EAAE;MAE7B,IAAIjF,MAAM,GAAG;QACXyD,MAAM,EAAE,IAAIC,MAAM,CAACrC,SAAS,CAACO,IAAI,EAAE,QAAQ,CAAC;QAC5CmC,KAAK,EAAE,IAAI1E,WAAW,CAAC,IAAI,CAACiD,oBAAoB,CAACtD,GAAG,CAACgC,KAAK,CAACK,SAAS,CAACrC,GAAG,EAAE,IAAI,CAAC,CAAC+E,KAAK,CAAC,CAAC;QACvFnC,IAAI,EAAE,IAAIvC,WAAW,CAAC,IAAI,CAACsC,SAAS,CAACN,SAAS,CAACO,IAAI,EAAEP,SAAS,CAACQ,OAAO,CAAC,CAAC;QACxEpC,IAAI,EAAE4B,SAAS,CAAC5B,IAAI;QACpB2E,IAAI,EAAE,IAAI,CAACD,SAAS,CAACnF,GAAG,CAACgC,KAAK,CAACK,SAAS,CAACrC,GAAG,EAAE,IAAI,CAAC,CAAC+E,KAAK,EAAE1C,SAAS,CAACQ,OAAO,CAAC;QAC7E5B,OAAO,EAAEoB,SAAS,CAACpB,OAAO;QAC1BmB,KAAK,EAAEC,SAAS,CAACD,KAAK;QACtBwD,aAAa,EAAE,IAAI,CAACC,kBAAkB,CAACxD,SAAS,CAACQ,OAAO,CAAC,iBAAiB,CAAC,IAAIR,SAAS,CAACuD,aAAa,IAAI,EAAE,CAAC;QAC7GG,iBAAiB,EAAE,IAAI,CAACF,kBAAkB,CAACxD,SAAS,CAACQ,OAAO,CAAC,iBAAiB,CAAC,IAAIR,SAAS,CAACuD,aAAa,IAAI,EAAE,EAAE,IAAI,CAAC;QACvHM,EAAE,EAAE7D,SAAS,CAACD,KAAK,CAAC8D;MACtB,CAAC;MAED,IAAIC,CAAC,GAAGhG,MAAM,CAACiG,MAAM,CAAC,CAAC;MAEvBD,CAAC,CAACE,EAAE,CAAC,OAAO,EAAEJ,SAAS,CAAC;MAExBE,CAAC,CAACG,GAAG,CAAC,MAAM;QAEV,MAAMC,kBAAkB,GAAGlE,SAAS,CAACzB,UAAU;QAE/C,IAAIA,UAAU,GAAG,IAAI2F,kBAAkB,CACrClE,SAAS,CAAC5B,IAAI,EACd4B,SAAS,CAACsD,MAAM,EAChBtD,SAAS,CAACQ,OAAO,EACjB7B,MAAM,EACNiF,SACF,CAAC;QAEDrF,UAAU,CAACe,UAAU,CAAC6E,OAAO,CAAC,IAAI,CAAC7E,UAAU,CAAC;QAC9Cf,UAAU,CAACgB,UAAU,CAAC6E,MAAM,CAAC,IAAI,CAAC7E,UAAU,CAAC;QAE7ChB,UAAU,CAAC0F,GAAG,CAAC,CAAC;QAEhB,OAAO1F,UAAU;MAEnB,CAAC,CAAC;IAEJ;EAEF;EAEA,OAAOa,MAAM;AAEf,CAAC,EAAE,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}