{"ast":null,"code":"module.exports = (() => {\n  'use strict';\n\n  const ExecutionQueue = require('./execution_queue.js');\n\n  /**\n  * Controller for handling HTTP requests\n  * @class\n  */\n  class Controller {\n    constructor(path, method, requestHeaders, params, responder) {\n      this._path = path || '';\n      this._method = method || '';\n      this._requestHeaders = requestHeaders || {};\n      this._headers = {};\n      this._status = 200;\n      this._responder = responder || (() => {});\n      this._securityPolicies = {};\n      this.params = params || {};\n      this.middleware = new ExecutionQueue();\n      this.renderware = new ExecutionQueue();\n    }\n    convertMethod(method, id) {\n      let acceptMethods = {\n        'GET': ['index', 'show'],\n        'PUT': ['put', 'update'],\n        'POST': ['create', 'post'],\n        'DELETE': ['del', 'destroy'],\n        'OPTIONS': ['options', 'options']\n      };\n      let hasId = !!id;\n      method = method in acceptMethods ? method : 'GET';\n      method = acceptMethods[method][hasId | 0];\n      return method;\n    }\n    run() {\n      this.before();\n      this.middleware.exec(this, err => {\n        if (err) {\n          return this.httpError(err.statusCode || 500, err.message);\n        }\n        this[this.convertMethod(this._method, this.params.id)]();\n      });\n    }\n\n    /**\n    * Default \"501 - Not Implemented\" response\n    */\n    notImplemented() {\n      this.status(501);\n      this.render('Not Implemented');\n    }\n\n    /**\n    * Intended to be overwritten when inherited. Run before middleware.\n    *   Controller-specific middleware and renderware here\n    */\n    before() {}\n\n    /**\n    * Intended to be overwritten when inherited. Run after renderware.\n    */\n    after() {}\n\n    /**\n    * Method called when a route is hit with a GET request, if not first intercepted by custom Controller#index or Controller#show methods. Intended to be overwritten when inherited.\n    */\n    get() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with a PUT request, if not first intercepted by custom Controller#update method. Intended to be overwritten when inherited.\n    */\n    put() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with a POST request, if not first intercepted by custom Controller#create method. Intended to be overwritten when inherited.\n    */\n    post() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with a DELETE request, if not first intercepted by custom Controller#destroy method. Intended to be overwritten when inherited.\n    */\n    del() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with an OPTIONS request. Typically unused, exists for CORS purposes.\n    */\n    options() {\n      this.status(200);\n      this.setHeader('Content-Type', 'text/plain');\n      this.render('200 OK');\n    }\n    index() {\n      this.get();\n    }\n    show() {\n      this.get();\n    }\n    update() {\n      this.put();\n    }\n    create() {\n      this.post();\n    }\n    destroy() {\n      this.del();\n    }\n\n    /**\n    * Set HTTP headers to be used by the outgoing http.ServerResponse\n    * @param {Object} object Object containing key-value pairs for HTTP headers\n    * @return {Object} The headers object created\n    */\n    setHeaders(object) {\n      return this._headers = Object.keys(object).reduce((o, key) => {\n        key = key.split('-').map(function (v) {\n          return v[0].toUpperCase() + v.substr(1).toLowerCase();\n        }).join('-');\n        o[key.toLowerCase()] = object[key];\n        return o;\n      }, {});\n    }\n\n    /**\n    * Uppercase all words in header key.\n    * @param {String} key\n    * @return {String}\n    */\n    _parseHeaderKey(key) {\n      key = key.split('-').map(function (v) {\n        return v[0].toUpperCase() + v.substr(1).toLowerCase();\n      }).join('-');\n      return key;\n    }\n\n    /**\n    * Set a specific response header\n    * @param {String} key\n    * @param {String} value\n    */\n    setHeader(key, value) {\n      key = this._parseHeaderKey(key);\n      if (key === 'Content-Type' && value.indexOf(';') === -1 && (value === 'application/javascript' || value === 'application/json' || value.indexOf('text/') === 0)) {\n        value = value + '; charset=utf-8';\n      }\n      return this._headers[key] = value;\n    }\n\n    /**\n     * Add a value to a existing specific response header. If header not exists create it.\n     * @param {String} key\n     * @param {String} value\n     */\n    appendHeader(key, value) {\n      key = this._parseHeaderKey(key);\n      let removeWhitespace = v => v.replace(/^\\s*(.*)\\s*$/, '$1');\n      let values = (this._headers[key] || '').split(';').map(removeWhitespace);\n      values[0] = values[0].split(',').map(removeWhitespace);\n      values[0].indexOf(value) === -1 && values[0].push(value);\n      values[0] = values[0].join(', ');\n      return this._headers[key] = values.join('; ');\n    }\n\n    /**\n    * Get the value of a specific response header\n    * @param {String} key\n    * @param {String} value Default value returned if not found\n    */\n    getHeader(key, value) {\n      key = this._parseHeaderKey(key);\n      return this._headers.hasOwnProperty(key) ? this._headers[key] : value;\n    }\n\n    /**\n    * Set HTTP status code for this response\n    * @param {Number} code\n    */\n    status(code) {\n      return this._status = code;\n    }\n\n    /**\n    * The current HTTP status code expected to be used by the outgoing http.ServerResponse\n    * @return {number}\n    */\n    getStatus() {\n      return this._status;\n    }\n\n    /**\n    * Using API formatting, send an http.ServerResponse indicating there was an Internal Server Error (500)\n    * @param {string} msg Error message to send\n    * @return {boolean}\n    */\n    error(msg) {\n      this.status(500);\n      this.render(msg || 'Internal Server Error');\n      return true;\n    }\n\n    /**\n    * Using API formatting, send a http.ServerResponse error with a specific HTTP response status code\n    * @param {Number} code HTTP response status code\n    * @param {string} msg Response message to send\n    * @return {boolean}\n    */\n    httpError(code, msg) {\n      this.status(code);\n      this.render(msg);\n      return true;\n    }\n\n    /**\n    * Render an HTTP response (end ServerResponse) based on provided data\n    * @param {Object} data Can be Buffer, String, or Plain Object\n    */\n    render(data) {\n      if (data instanceof Buffer) {\n        this.getHeader('Content-Type') || this.setHeader('Content-Type', 'application/octet-stream');\n      } else {\n        if (typeof data === 'object' && data !== null) {\n          this.getHeader('Content-Type') || this.setHeader('Content-Type', 'application/json');\n          data = JSON.stringify(data, null, 2);\n        }\n        data = data + '';\n        data = new Buffer(data);\n      }\n      this.renderware.exec(this, data, (e, data) => {\n        if (e) {\n          this._responder(e);\n          this.after();\n          return;\n        }\n        this.getHeader('Content-Type') || this.setHeader('Content-Type', 'text/html');\n        this.getHeader('X-Powered-By') || this.setHeader('X-Powered-By', 'fxn');\n        this._responder(null, this._status, this._headers, data);\n        this.after();\n      });\n    }\n\n    /**\n    * Specifies CORS (cross origin resource sharing) headers.\n    * @param {string} value Use '*' for a generic API service that accepts requests from anywhere, otherwise specific a domain.\n    * @return {this}\n    */\n    allowOrigin(value) {\n      this.setHeader('Access-Control-Allow-Origin', value);\n      this.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n      this.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n      return this;\n    }\n\n    /**\n    * Add Content-Security-Policy headers\n    * @param {string} directive The directive of the security policy\n    * @param {string} src The value (domain) to add to the policy\n    */\n    securityPolicy(directive, src) {\n      if (!src.match(/^https?:\\/\\/.+$/)) {\n        if (['none', 'self', 'unsafe-inline', 'unsafe-eval'].indexOf(src) === -1) {\n          throw new Error(`Invalid security policy src: \"${src}\"`);\n        }\n        src = `'${src}'`;\n      }\n      directive = directive.toLowerCase();\n      src = src.toLowerCase();\n      this._securityPolicies[directive] = this._securityPolicies[directive] || {};\n      this._securityPolicies[directive][src] = true;\n      let contentSecurityPolicy = Object.keys(this._securityPolicies).map(policy => `${policy} ${Object.keys(this._securityPolicies[policy]).join(' ')}`).join('; ');\n      return this.setHeader('Content-Security-Policy', contentSecurityPolicy);\n    }\n\n    /**\n    * Creates a 302 redirect to the desired location\n    * @param {string} location\n    */\n    redirect(location) {\n      this.status(302);\n      this.setHeader('Location', location);\n      this.render();\n    }\n  }\n  return Controller;\n})();","map":{"version":3,"names":["module","exports","ExecutionQueue","require","Controller","constructor","path","method","requestHeaders","params","responder","_path","_method","_requestHeaders","_headers","_status","_responder","_securityPolicies","middleware","renderware","convertMethod","id","acceptMethods","hasId","run","before","exec","err","httpError","statusCode","message","notImplemented","status","render","after","get","put","post","del","options","setHeader","index","show","update","create","destroy","setHeaders","object","Object","keys","reduce","o","key","split","map","v","toUpperCase","substr","toLowerCase","join","_parseHeaderKey","value","indexOf","appendHeader","removeWhitespace","replace","values","push","getHeader","hasOwnProperty","code","getStatus","error","msg","data","Buffer","JSON","stringify","e","allowOrigin","securityPolicy","directive","src","match","Error","contentSecurityPolicy","policy","redirect","location"],"sources":["/Users/apps/node_modules/fxn/core/required/controller.js"],"sourcesContent":["module.exports = (() => {\n\n  'use strict';\n\n  const ExecutionQueue = require('./execution_queue.js');\n\n  /**\n  * Controller for handling HTTP requests\n  * @class\n  */\n  class Controller {\n\n    constructor(path, method, requestHeaders, params, responder) {\n\n      this._path = path || '';\n      this._method = method || '';\n      this._requestHeaders = requestHeaders || {};\n\n      this._headers = {};\n      this._status = 200;\n\n      this._responder = responder || (() => {});\n\n      this._securityPolicies = {};\n\n      this.params = params || {};\n\n      this.middleware = new ExecutionQueue();\n      this.renderware = new ExecutionQueue();\n\n    }\n\n    convertMethod(method, id) {\n\n      let acceptMethods = {\n        'GET': ['index', 'show'],\n        'PUT': ['put', 'update'],\n        'POST': ['create', 'post'],\n        'DELETE': ['del', 'destroy'],\n        'OPTIONS': ['options', 'options']\n      };\n\n      let hasId = !!id;\n\n      method = method in acceptMethods ? method : 'GET';\n      method = acceptMethods[method][hasId | 0];\n\n      return method;\n\n    }\n\n    run() {\n\n      this.before();\n\n      this.middleware.exec(this, (err) => {\n\n        if (err) {\n          return this.httpError(err.statusCode || 500, err.message);\n        }\n\n        this[this.convertMethod(this._method, this.params.id)]();\n\n      });\n\n    }\n\n    /**\n    * Default \"501 - Not Implemented\" response\n    */\n    notImplemented() {\n      this.status(501);\n      this.render('Not Implemented');\n    }\n\n    /**\n    * Intended to be overwritten when inherited. Run before middleware.\n    *   Controller-specific middleware and renderware here\n    */\n    before() {}\n\n    /**\n    * Intended to be overwritten when inherited. Run after renderware.\n    */\n    after() {}\n\n    /**\n    * Method called when a route is hit with a GET request, if not first intercepted by custom Controller#index or Controller#show methods. Intended to be overwritten when inherited.\n    */\n    get() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with a PUT request, if not first intercepted by custom Controller#update method. Intended to be overwritten when inherited.\n    */\n    put() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with a POST request, if not first intercepted by custom Controller#create method. Intended to be overwritten when inherited.\n    */\n    post() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with a DELETE request, if not first intercepted by custom Controller#destroy method. Intended to be overwritten when inherited.\n    */\n    del() {\n      this.notImplemented();\n    }\n\n    /**\n    * Method called when a route is hit with an OPTIONS request. Typically unused, exists for CORS purposes.\n    */\n    options() {\n      this.status(200);\n      this.setHeader('Content-Type', 'text/plain');\n      this.render('200 OK');\n    }\n\n    index() { this.get(); }\n    show() { this.get(); }\n    update() { this.put(); }\n    create() { this.post(); }\n    destroy() { this.del(); }\n\n    /**\n    * Set HTTP headers to be used by the outgoing http.ServerResponse\n    * @param {Object} object Object containing key-value pairs for HTTP headers\n    * @return {Object} The headers object created\n    */\n    setHeaders(object) {\n      return (this._headers = Object.keys(object).reduce((o, key) => {\n        key = key.split('-').map(function(v) {\n          return v[0].toUpperCase() + v.substr(1).toLowerCase();\n        }).join('-');\n        o[key.toLowerCase()] = object[key];\n        return o;\n      }, {}));\n    }\n\n    /**\n    * Uppercase all words in header key.\n    * @param {String} key\n    * @return {String}\n    */\n    _parseHeaderKey(key){\n      key = key.split('-').map(function(v) {\n        return v[0].toUpperCase() + v.substr(1).toLowerCase();\n      }).join('-');\n\n      return key;\n    }\n\n    /**\n    * Set a specific response header\n    * @param {String} key\n    * @param {String} value\n    */\n    setHeader(key, value) {\n\n      key = this._parseHeaderKey(key);\n\n      if (key === 'Content-Type' && value.indexOf(';') === -1 && (\n        value === 'application/javascript' ||\n        value === 'application/json' ||\n        value.indexOf('text/') === 0\n      )) {\n        value = value + '; charset=utf-8';\n      }\n\n      return this._headers[key] = value;\n\n    }\n\n    /**\n     * Add a value to a existing specific response header. If header not exists create it.\n     * @param {String} key\n     * @param {String} value\n     */\n    appendHeader(key, value) {\n      key = this._parseHeaderKey(key);\n      let removeWhitespace = v => v.replace(/^\\s*(.*)\\s*$/, '$1');\n      let values = (this._headers[key] || '').split(';').map(removeWhitespace);\n      values[0] = values[0].split(',').map(removeWhitespace);\n      values[0].indexOf(value) === -1 && values[0].push(value);\n      values[0] = values[0].join(', ');\n      return (this._headers[key] = values.join('; '));\n    }\n\n    /**\n    * Get the value of a specific response header\n    * @param {String} key\n    * @param {String} value Default value returned if not found\n    */\n    getHeader(key, value) {\n      key = this._parseHeaderKey(key);\n\n      return this._headers.hasOwnProperty(key) ? this._headers[key] : value;\n    }\n\n    /**\n    * Set HTTP status code for this response\n    * @param {Number} code\n    */\n    status(code) {\n      return this._status = code;\n    }\n\n    /**\n    * The current HTTP status code expected to be used by the outgoing http.ServerResponse\n    * @return {number}\n    */\n    getStatus() {\n      return this._status;\n    }\n\n    /**\n    * Using API formatting, send an http.ServerResponse indicating there was an Internal Server Error (500)\n    * @param {string} msg Error message to send\n    * @return {boolean}\n    */\n    error(msg) {\n      this.status(500);\n      this.render(msg || 'Internal Server Error');\n      return true;\n    }\n\n    /**\n    * Using API formatting, send a http.ServerResponse error with a specific HTTP response status code\n    * @param {Number} code HTTP response status code\n    * @param {string} msg Response message to send\n    * @return {boolean}\n    */\n    httpError(code, msg) {\n      this.status(code);\n      this.render(msg);\n      return true;\n    }\n\n    /**\n    * Render an HTTP response (end ServerResponse) based on provided data\n    * @param {Object} data Can be Buffer, String, or Plain Object\n    */\n    render(data) {\n\n      if (data instanceof Buffer) {\n\n        this.getHeader('Content-Type') || this.setHeader('Content-Type', 'application/octet-stream');\n\n      } else {\n\n        if (typeof data === 'object' && data !== null) {\n          this.getHeader('Content-Type') || this.setHeader('Content-Type', 'application/json');\n          data = JSON.stringify(data, null, 2);\n        }\n\n        data = data + '';\n        data = new Buffer(data);\n\n      }\n\n      this.renderware.exec(this, data, (e, data) => {\n\n        if (e) {\n          this._responder(e);\n          this.after();\n          return;\n        }\n\n        this.getHeader('Content-Type') || this.setHeader('Content-Type', 'text/html');\n        this.getHeader('X-Powered-By') || this.setHeader('X-Powered-By', 'fxn');\n        this._responder(null, this._status, this._headers, data);\n        this.after();\n\n      });\n\n    }\n\n    /**\n    * Specifies CORS (cross origin resource sharing) headers.\n    * @param {string} value Use '*' for a generic API service that accepts requests from anywhere, otherwise specific a domain.\n    * @return {this}\n    */\n    allowOrigin(value) {\n\n      this.setHeader('Access-Control-Allow-Origin', value);\n      this.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n      this.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n\n      return this;\n\n    }\n\n    /**\n    * Add Content-Security-Policy headers\n    * @param {string} directive The directive of the security policy\n    * @param {string} src The value (domain) to add to the policy\n    */\n    securityPolicy(directive, src) {\n\n      if (!src.match(/^https?:\\/\\/.+$/)) {\n\n        if (['none', 'self', 'unsafe-inline', 'unsafe-eval'].indexOf(src) === -1) {\n          throw new Error(`Invalid security policy src: \"${src}\"`);\n        }\n\n        src = `'${src}'`;\n\n      }\n\n      directive = directive.toLowerCase();\n      src = src.toLowerCase();\n\n      this._securityPolicies[directive] = this._securityPolicies[directive] || {};\n      this._securityPolicies[directive][src] = true;\n\n      let contentSecurityPolicy = Object.keys(this._securityPolicies)\n        .map(policy => `${policy} ${Object.keys(this._securityPolicies[policy]).join(' ')}`)\n        .join('; ')\n\n      return this.setHeader('Content-Security-Policy', contentSecurityPolicy);\n\n    }\n\n    /**\n    * Creates a 302 redirect to the desired location\n    * @param {string} location\n    */\n    redirect(location) {\n      this.status(302);\n      this.setHeader('Location', location);\n      this.render();\n    }\n\n  }\n\n  return Controller;\n\n})();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}